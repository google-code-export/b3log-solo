/*
 * Copyright (C) 2009, 2010, B3log Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.b3log.solo.repository.impl;

import org.apache.log4j.Logger;
import org.b3log.solo.model.Comment;
import org.b3log.solo.repository.CommentRepository;
import org.b3log.latke.Keys;
import org.b3log.latke.repository.RepositoryException;
import org.b3log.latke.repository.gae.AbstractGAERepository;
import org.json.JSONException;
import org.json.JSONObject;

/**
 * Comment Google App Engine repository.
 *
 * @author <a href="mailto:DL88250@gmail.com">Liang Ding</a>
 * @version 1.0.0.0, Aug 10, 2010
 */
public class CommentGAERepository extends AbstractGAERepository
        implements CommentRepository {

    /**
     * Logger.
     */
    private static final Logger LOGGER =
            Logger.getLogger(CommentGAERepository.class);

    @Override
    public String getName() {
        return Comment.COMMENT;
    }

    /**
     * Adds the specified comment.
     *
     * <p>
     *   The stored comment looks like:
     *   <pre>
     *   key = {
     *     "oId": key,
     *     "commentContent": "",
     *     "commentDate": ""
     *   }
     *   </pre>
     *   The key is generated by current time mills, and it will be used for
     *   database key sorting. 
     * </p>
     * @param comment the specified comment
     * @return the generated object id
     * @throws RepositoryException repository exception
     * @see #update(java.lang.String, org.json.JSONObject)
     * @see Keys#OBJECT_ID
     */
    @Override
    public String add(final JSONObject comment) throws RepositoryException {
        String ret = null;

        try {
            comment.put(Comment.COMMENT_DATE,
                        Keys.SIMPLE_DATE_FORMAT.format(
                    System.currentTimeMillis()));

            ret = super.add(comment);
        } catch (final JSONException e) {
            LOGGER.error(e.getMessage(), e);
            throw new RepositoryException(e);
        }

        LOGGER.debug("Added an comment[oId=" + ret + "]");

        return ret;
    }
}
