/*
 * Copyright (C) 2010, Liyuan Li
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
(function($){var Bowknot=function(){};$.extend(Bowknot.prototype,{bowknot:{version:"0.0.0.8",author:"lly219@gmail.com"},getDefaults:function(defaults,settings,key){if(key==="styleClass"){if(settings.theme==="default"||settings.theme===undefined){return defaults.styleClass}settings.styleClass={};for(var styleName in defaults[key]){settings.styleClass[styleName]=settings.theme+"-"+defaults.styleClass[styleName]}}else if((key==="height"&&settings[key]!=="auto")||key==="width"){if(settings[key]===null||settings[key]===undefined){return defaults[key]+"px"}else{return settings[key]+"px"}}else{if(settings[key]===null||settings[key]===undefined){return defaults[key]}}return settings[key]},strToInt:function(str){if(!str){return;}return parseInt(str.substring(0,str.length-2))},sortNumber:function(a,b){return a-b},getMaxNumber:function(arr){arr.sort(this.sortNumber);return arr[arr.length-1]},getMinNumber:function(arr){arr.sort(this.sortNumber);return arr[0]},getDate:function(a,b){var c=new Date(a);var d=c.getFullYear(),month=c.getMonth()+1,day=c.getDate(),hours=c.getHours(),seconds=c.getSeconds(),minutes=c.getMinutes();if(month<10){month="0"+month.toString()}if(day<10){day="0"+day.toString()}if(hours<10){hours="0"+hours.toString()}if(minutes<10){minutes="0"+minutes.toString()}if(seconds<10){seconds="0"+seconds.toString()}switch(b){case undefined:return d+"-"+month+"-"+day;break;case 1:return d+"-"+month+"-"+day+" "+hours+":"+minutes+":"+seconds;break;default:return false;break}},ellipsis:function(a,b){var c=0,strTrim=a.replace(/(^\s*)|(\s*$)/g,""),strArray=strTrim.split(""),resultStr="";for(var i=0;i<strArray.length;i++){if(c<b){if(strArray[i]&&strArray[i].match(/[^u4E00-u9FA5]/)){c+=2}else{c++}resultStr+=strArray[i]}}if(strTrim!==resultStr){resultStr+="..."}return resultStr},trimUnique:function(a){for(var i=0;i<a.length;i++){a[i]=a[i].replace(/(^\s*)|(\s*$)/g,"");if(a[i]===""){a.splice(i,1);i--}}return $.unique(a)},goTop:function(acceleration,time){acceleration=acceleration||0.1;time=time||16;var x1=0;var y1=0;var x2=0;var y2=0;var x3=0;var y3=0;if(document.documentElement){x1=document.documentElement.scrollLeft||0;y1=document.documentElement.scrollTop||0}if(document.body){x2=document.body.scrollLeft||0;y2=document.body.scrollTop||0}var x3=window.scrollX||0;var y3=window.scrollY||0;var x=Math.max(x1,Math.max(x2,x3));var y=Math.max(y1,Math.max(y2,y3));var speed=1+acceleration;window.scrollTo(Math.floor(x/speed),Math.floor(y/speed));if(x>0||y>0){var invokeFunction="$.bowknot.goTop("+acceleration+", "+time+")";window.setTimeout(invokeFunction,time)}}});$.bowknot=new Bowknot()})(jQuery);
(function($){$.fn.extend({paginate:{version:"0.0.1.1",author:"lly219@gmail.com"}});var h=new Date().getTime();var k="paginate";var l=function(){this._defaults={"styleClass":{"pageCountClass":"pagination-pageCount","goPageClass":"pagination-goPage","prePageClass":"pagination-prePage","nextPageClass":"pagination-nextPage","lastPageClass":"pagination-lastPage","firstPageClass":"pagination-firstPage","prePageHoverClass":"pagination-prePageHover","nextPageHoverClass":"pagination-nextPageHover","lastPageHoverClass":"pagination-lastPageHover","firstPageHoverClass":"pagination-fitstPageHover","goInputClass":"pagination-goInput","submitClass":"pagination-submit","pageClass":"pagination-page","pageHoverClass":"pagination-pageHover","pageCurrentClass":"pagination-pageCurrent","paginationClass":"pagination-pagination"},"pageCount":1,"currentPage":1,"windowSize":5,"bindEvent":"","isGoTo":true,"isPageCount":true,"theme":"default","errorMessage":undefined,"style":"taobao","firstPage":"","lastPage":"","nextPage":"","previousPage":""}};$.extend(l.prototype,{_attach:function(a,b){if(!a.id){this.uuid++;a.id="dp"+this.uuid}var c=this._newInst($(a));c.settings=$.extend({},b||{});$.data(a,k,c);this._init(a)},_newInst:function(a){var b=a[0].id.replace(/([^A-Za-z0-9_])/g,"\\\\$1");return{id:b}},_getInst:function(a){try{return $.data(a,k)}catch(err){throw"Missing instance data for this pagination";}},_destroyPagination:function(){},_updatePagination:function(a,b){var c=this._getInst(a),settings=c.settings;for(var d in b){if(typeof(b[d])==="string"||d==="data"||typeof(b[d])==="number"){settings[d]=b[d]}else{settings[d]=$.extend(settings[d],b[d])}}$.paginate._build(a)},_init:function(a){var b=this._getInst(a);var c=b.id,settings=b.settings;$("#"+c).append("<div id='"+c+"Pagination' class='"+$.paginate._getDefaults($.paginate._defaults,settings,"styleClass").paginationClass+"'></div>");this._build(a)},_build:function(a){var b=this._getInst(a);var c=b.id,settings=b.settings;var d=$.paginate._getDefaults($.paginate._defaults,settings,"currentPage"),pageCount=settings.pageCount,pages=[],bindEvent=settings.bindEvent,styleClass=$.paginate._getDefaults($.paginate._defaults,settings,"styleClass");var e="",pageCountHTML="",goToPageHTML="",windowSize=$.paginate._getDefaults($.paginate._defaults,settings,"windowSize"),style=$.paginate._getDefaults($.paginate._defaults,settings,"style");if($.paginate._getDefaults($.paginate._defaults,settings,"isGoTo")){goToPageHTML="<div class='bowknot-left'>到</div><input class='"+styleClass.goInputClass+"' id='"+c+"PaginationInput'/><div class='bowknot-left'>页</div>&nbsp;<button class='"+styleClass.submitClass+"' id='"+c+"PaginationSubmit'>确定</button>"}if($.paginate._getDefaults($.paginate._defaults,settings,"isPageCount")){pageCountHTML="<div class='bowknot-left'>&nbsp;共"+pageCount+"页&nbsp;</div>"}switch(style){case"taobao":pages=this._getTaobaoPages(d,pageCount);break;case"google":pages=this._getGooglePages(d,pageCount,windowSize);break;default:alert("has no style!");break}for(var i=0;i<pages.length;i++){var f=" class='"+styleClass.pageClass+"'",currPageNumber=0,currDisplayPageNumber=0;if(pages[i]===d){f=" class='"+styleClass.pageCurrentClass+"'"}if(typeof(pages[i])==="number"){currPageNumber=currDisplayPageNumber=pages[i]}else{var g=pages[i].split("&");currPageNumber=parseInt(g[0]);currDisplayPageNumber=g[1];if(currDisplayPageNumber===">"){f=" class='"+styleClass.nextPageClass+"'"}if(currDisplayPageNumber==="<"){f=" class='"+styleClass.prePageClass+"'"}}e+="<span title='"+currPageNumber+"' onclick=\"jQuery.paginate._changePages('"+c+"');"+bindEvent+"("+currPageNumber+")\""+f+">"+currDisplayPageNumber+"</span>"}if(pages[0]!==1){if(settings.previousPage){e="<span class='"+styleClass.prePageClass+"' title='"+(d-1)+"' onclick=\"jQuery.paginate._changePages('"+c+"');"+bindEvent+"("+(d-1)+");\">"+settings.previousPage+"</span>"+e}if(settings.firstPage){e="<span title='1' class='"+styleClass.firstPageClass+"' onclick=\"jQuery.paginate._changePages('"+c+"');"+bindEvent+"(1);\">"+settings.firstPage+"</span>"+e}}if(pages[pages.length-1]!==pageCount){if(settings.nextPage){e+="<span class='"+styleClass.nextPageClass+"' title='"+(d+1)+"' onclick=\"jQuery.paginate._changePages('"+c+"');"+bindEvent+"("+(d+1)+");\">"+settings.nextPage+"</span>"}if(settings.lastPage){e+="<span class='"+styleClass.lastPageClass+"' title='"+pageCount+"' onclick=\"jQuery.paginate._changePages('"+c+"');"+bindEvent+"("+pageCount+");\">"+settings.lastPage+"</span>"}}$("#"+c+"Pagination").html(e+pageCountHTML+goToPageHTML);$("#"+c+"Pagination span").mouseover(function(){if($(this).hasClass(styleClass.prePageClass)){this.className=styleClass.prePageHoverClass}else if($(this).hasClass(styleClass.nextPageClass)){this.className=styleClass.nextPageHoverClass}else{$(this).addClass(styleClass.pageHoverClass)}}).mouseout(function(){if($(this).hasClass(styleClass.prePageHoverClass)){this.className=styleClass.prePageClass}else if($(this).hasClass(styleClass.nextPageHoverClass)){this.className=styleClass.nextPageClass}else{$(this).removeClass(styleClass.pageHoverClass)}});$("#"+c+"PaginationInput").bind("keypress",{target:a},$.paginate._goToPage).focus();$("#"+c+"PaginationSubmit").bind("click",{target:a},$.paginate._goToPage)},_changePages:function(a){var b=a;if(typeof(a)==="string"){b=$("#"+a)[0]}$.paginate._build(b)},_goToPage:function(a){var b=a.data.target;var c=$.paginate._getInst(b);var d=c.id,settings=c.settings;var e=parseInt($("#"+d+"PaginationInput").val());if(this.id.search(/PaginationInput/)!==-1&&a.keyCode!==13){return}settings.currentPage=parseInt($("#"+d+"PaginationInput").val());if(e>0&&e<=settings.pageCount){eval(settings.bindEvent+"("+e+");");$.paginate._changePages(d)}else if(settings.errorMessage){alert(settings.errorMessage);$("#"+d+"PaginationInput").val("")}},_getGooglePages:function(a,b,c){var d=[];if(b<c){for(var i=0;i<b;i++){d.push(i+1)}}else{var e=a-parseInt(c/2);e=e<1?1:e;e=e+c>b?b-c+1:e;for(var j=0;j<c;j++){d.push(e+j)}}return d},_getTaobaoPages:function(a,b){var c=[],i=2,len=4,begin=3,end=0,maxEnd=0,pre=0;if(a>=len){begin=a-Math.ceil(len/2);maxEnd=a+Math.ceil(len/2)+1;if(maxEnd<b){end=maxEnd}else{end=b}}else if(a<len){maxEnd=a+Math.ceil(len/2)+1;if(maxEnd<b){end=maxEnd}else{end=b}}if(begin<3){begin=3}for(i=begin;i<=end;i++){c.push(i)}if(begin>3){pre=2+(begin-2);c.unshift(pre+"&...")}if(b<2){i=(a===0)?0:1}else{i=2}for(;i>=1;i=i-1){c.unshift(i)}if(end<b){pre=end+Math.ceil(len/2);if(pre>b){pre=b}c.push(pre+"&...")}if(a>1){c.splice(0,0,(a-1)+"&<")}if(a<b){c.push((a+1)+"&>")}return c},_getDefaults:function(a,b,c){if(c==="styleClass"){if(b.theme==="default"||b.theme===undefined){return a.styleClass}b.styleClass={};for(var d in a[c]){b.styleClass[d]=b.theme+"-"+a.styleClass[d]}}else if((c==="height"&&b[c]!=="auto")||c==="width"){if(b[c]===null||b[c]===undefined){return a[c]+"px"}else{return b[c]+"px"}}else{if(b[c]===null||b[c]===undefined){return a[c]}}return b[c]}});$.fn.paginate=function(a){var b=Array.prototype.slice.call(arguments);return this.each(function(){if(a.update){$.paginate._updatePagination(this,a.update)}else{typeof a==="string"?$.paginate["_"+a+"Pagination"].apply($.paginate,[this].concat(b)):$.paginate._attach(this,a)}})};$.paginate=new l();window["DP_jQuery_"+h]=$})(jQuery);
(function($){$.fn.extend({table:{version:"0.0.0.7",author:"lly219@gmail.com"}});var n=new Date().getTime();var o="table";var p=function(){this._defaults={"styleClass":{"lineSelectedClass":"table-lineSelected","mainClass":"table-main","bodyClass":"table-body","headerClass":"table-header","lineHoverClass":"table-lineHover","sortClass":"table-sort","sortASCClass":"table-sortASC","sortDESCClass":"table-sortDESC","sortUnASCClass":"table-sortUnactiveASC","sortUnDESCClass":"table-sortUnactiveDESC","oddRowClass":"table-oddRow","evenRowClass":"table-evenRow","subTitleClass":"table-subTitle","subTitleHoverClass":"table-subTitleHover","subTitleShowClass":"table-subTitleShow","subTitleHideClass":"table-subTitleHide","expendRowClass":"table-expendRow","hasExpendClass":"table-hasExpend"}}};$.extend(p.prototype,{_attach:function(a,b){if(!a.id){this.uuid++;a.id="dp"+this.uuid}var c=this._newInst($(a));c.settings=$.extend({length:0,selectedRows:[]},b||{});$.data(a,o,c);this._init(a)},_newInst:function(a){var b=a[0].id.replace(/([^A-Za-z0-9_])/g,"\\\\$1");return{id:b}},_getInst:function(a){try{return $.data(a,o)}catch(err){throw"Missing instance data for this table";}},_init:function(a){var b=this._getInst(a),settings=b.settings;$(a).html("<div class='"+this._getDefaults(this._defaults,settings,"styleClass").mainClass+"' id='"+b.id+"Table'></div>");this._build(a)},_build:function(a){var b=this._getInst(a),settings=b.settings;var c=b.id;var d=this._getDefaults(this._defaults,settings,"styleClass");var e="<div id='"+c+"TableHeader' class='"+d.headerClass+"'></div>"+"<div id='"+c+"TableMain' class='"+d.bodyClass+"' style='height:"+(settings.height?settings.height+"px":"auto")+"'></div>";$("#"+c+"Table").html(e);this._buildHeader(a);if(settings.data){this._buildBody(a);this._bindEvent(a)}if(document.getElementById(c+"TableMain").clientWidth>0){$("#"+c+"TableHeader").width(document.getElementById(c+"TableMain").clientWidth);$(window).resize(function(){$("#"+c+"TableHeader").width(document.getElementById(c+"TableMain").clientWidth)})}},_buildHeader:function(a){var b=this._getInst(a).settings;var c=b.colModel,id=this._getInst(a).id,headerHTML="<table cellpadding='0' cellspacing='0' style='width:100%'><tr>";for(var i=0;i<c.length;i++){var d=id+"_"+c[i].index;if(c[i].minWidth){headerHTML+="<th style='min-width:"+c[i].minWidth+"px;'>"}else{headerHTML+="<th style='width:"+c[i].width+"px;'>"}if(c[i].type==="checkbox"){if(c[i].isLabel){headerHTML+=c[i].text}else{headerHTML+="<input id='"+d+"' onclick=\"DP_jQuery_"+n+".table._selectHeaderCheckbox(this);\" type='checkbox'/></th>"}}else{headerHTML+="<span id='"+d+"'>"+c[i].text?c[i].text:""+"</span></th>"}}$("#"+id+"TableHeader").html(headerHTML+"</tr></table>")},_buildBody:function(a){var b=this._getInst(a).id,settings=this._getInst(a).settings,data=settings.data;var c=this._getDefaults(this._defaults,settings,"styleClass"),bodyHTML="";for(var d=0;d<data.length;d++){if(data[d].groupName!=="all"){bodyHTML+="<div  id='"+b+"SubTitle"+d+"'class='"+c.subTitleClass+"'><div class='left "+c.subTitleShowClass+"'></div><div class='left'>"+data[d].groupName+"</div><div class='clear'></div></div>"}bodyHTML+="<table id="+b+"SubTable"+d+" style='width:100%;' cellpadding='0' cellspacing='0'>"+this._buildData(a,data[d].groupData,d)+"</table>"}$("#"+b+"TableMain").html(bodyHTML)},_buildData:function(a,b,c){var d=this._getInst(a).id,settings=this._getInst(a).settings;var e=settings.colModel,styleClass=this._getDefaults(this._defaults,settings,"styleClass");var f="";for(var i=0;i<b.length;i++){var g=b[i],tBodyHTML="<tbody class='$CLASS'>",trHTML="<tr>",rowClass=styleClass.oddRowClass;if(i%2===1){rowClass=styleClass.evenRowClass}if(settings.expendRow){trHTML='<tr class="'+styleClass.hasExpendClass+'">'}g.uuuid=settings.length++;for(var j=0;j<e.length;j++){var h=e[j].index;var k=g[h],styleHTML=e[j].align?"text-align:"+e[j].align+";":"";if(k===undefined||k===null||$.trim(k)===""){k="&nbsp;"}if(i===0){if(e[j].minWidth){styleHTML+="min-width:"+e[j].minWidth+"px;"}else{styleHTML+="width:"+e[j].width+"px;"}}trHTML+="<td style='"+styleHTML+"'>";if(e[j].type){var l="",isCheckedHTML="",isDisabledHTML="",inputId=d+"_"+h+"_"+c+"_"+i;if(g[h].value){isCheckedHTML="checked='checked'";tBodyHTML=tBodyHTML.replace("$CLASS",styleClass.lineSelectedClass+" "+rowClass);settings.selectedRows.push(g)}if(g[h].disabled){isDisabledHTML="disabled='disabled'"}l="<input name='"+d+"_"+h+"' id='"+inputId+"' type='"+e[j].type+"' onclick=\"DP_jQuery_"+n+".table._selectCheckbox(this);\" "+isCheckedHTML+" "+isDisabledHTML+"/>";k=l}if(e[j].style){k="<div style='"+e[j].style+"'>"+k+"</div>"}trHTML+=k+"</td>"}f+=tBodyHTML.replace("$CLASS",rowClass)+trHTML+"</tr>";if(settings.expendRow){var m=g[settings.expendRow.index];if(m===undefined){m=""}f+="<tr class='none "+styleClass.expendRowClass+" "+rowClass+"'><td colspan='"+e.length+"'>"+m+"</td></tr>"}f+="</tbody>"}return f},_bindEvent:function(b){var c=this._getInst(b);var d=c.id,settings=c.settings,colModel=c.settings.colModel,styleClass=this._getDefaults(this._defaults,settings,"styleClass"),data=settings.data;for(var e=0;e<data.length;e++){if(data[0].groupName!=="all"){$("#"+d+"SubTitle"+e).click(function(){var a=$(this).find("div")[0];if(a.className.indexOf(styleClass.subTitleShowClass)!=-1){a.className=a.className.replace(styleClass.subTitleShowClass,styleClass.subTitleHideClass);$(this).next().hide()}else{a.className=a.className.replace(styleClass.subTitleHideClass,styleClass.subTitleShowClass);$(this).next().show()}if(document.getElementById(d+"TableMain").clientWidth>0){$("#"+d+"TableHeader").width(document.getElementById(d+"TableMain").clientWidth)}if($.browser.version==="6.0"&&document.getElementById(d+"TableMain").scrollHeight>document.getElementById(d+"TableMain").clientHeight){scrollWidth=17;$("#"+d+"TableHeader").width(document.getElementById(d+"TableMain").clientWidth-17)}}).mouseover(function(){this.className=styleClass.subTitleHoverClass}).mouseout(function(){this.className=styleClass.subTitleClass})}var f=settings.bind?settings.bind:[],groupData=data[e].groupData;for(var m=0;m<groupData.length;m++){var g=$($("#"+d+"SubTable"+e+" tbody")[m]);for(var l=0;l<f.length;l++){g.bind(f[l].type,{"groupData":groupData[m],"bindNum":l},function(a){f[a.data.bindNum].action(a,a.data.groupData)})}g.mouseover(function(){if(!$(this).hasClass(styleClass.lineHoverClass)){$("#"+d+" tbody").each(function(){$(this).removeClass(styleClass.lineHoverClass);if($(this).find("tr").length===2){$(this).find("tr")[1].style.display="none"}});$(this).addClass(styleClass.lineHoverClass);if($(this).find("tr").length===2){$(this).find("tr")[1].style.display="block"}}});for(var j=0;j<colModel.length;j++){if(colModel[j].bind){var h=colModel[j].bind;for(var i=0;i<h.length;i++){$(g.find("td")[j]).bind(h[i].type,{"groupData":groupData[m],"bindNum":i,"colNum":j},function(a){colModel[a.data.colNum].bind[a.data.bindNum].action(a,a.data.groupData)})}}}}}},_selectHeaderCheckbox:function(a){var b=a.id.split("_")[0],index=a.id.split("_")[1];var c=$("#"+b).data(o).settings;var d=c.data,styleClass=this._getDefaults(this._defaults,c,"styleClass");for(var i=0;i<d.length;i++){var e=d[i].groupData;for(var j=0;j<e.length;j++){var f=$("#"+b+"_"+index+"_"+i+"_"+j);if(f.attr("disabled")===undefined||f.attr("disabled")===false){if(a.checked){f.attr("checked","checked");c.selectedRows.push(e[j])}else{f.removeAttr("checked");c.selectedRows.splice(j,1)}}}}if(a.checked){$("#"+b+"TableMain tbody").addClass(styleClass.lineSelectedClass)}else{$("#"+b+"TableMain tbody").removeClass(styleClass.lineSelectedClass)}$.unique(c.selectedRows)},_selectCheckbox:function(a){var b=a.id.split("_")[0],index=a.id.split("_")[1],groupNum=a.id.split("_")[2],rowNum=a.id.split("_")[3];var c=$("#"+b).data(o).settings;var d=c.data,styleClass=this._getDefaults(this._defaults,c,"styleClass"),$checkbox=$("#"+b+"_"+index),$row=$($("#"+b+"SubTable"+groupNum+" tbody")[rowNum]);if(a.checked){$row.addClass(styleClass.lineSelectedClass);c.selectedRows.push(d[groupNum].groupData[rowNum])}else{$row.removeClass(styleClass.lineSelectedClass);for(var j in c.selectedRows){if(c.selectedRows[j].uuuid===d[groupNum].groupData[rowNum].uuuid){c.selectedRows.splice(j,1)}}}if(c.selectedRows.length===c.length){$checkbox.attr("checked","checked")}else{$checkbox.removeAttr("checked")}},_getRow:function(a,b,c){var d={};for(var e in b){var f=b[e].groupData;for(var g in f){if(c===f[g].uuuid){d.data=f[g];d.$row=$($("#"+a+"SubTable"+e+" tbody")[g])}}}return d},_getDefaults:function(a,b,c){if(c==="styleClass"){if(b.theme==="default"||b.theme===undefined){return a.styleClass}b.styleClass={};for(var d in a[c]){b.styleClass[d]=b.theme+"-"+a.styleClass[d]}}else{if(b[c]===null||b[c]===undefined){return a[c]}}return b[c]},_strToInt:function(a){if(!a){return false}return parseInt(a.substring(0,a.length-2))},_updateTable:function(a,b,c){var d=this._getInst(a);var e=d.id,settings=d.settings;if(!c){if(b.height){var f=b.height;$("#"+e+"TableMain").height(f);settings.height=f}else{settings.data=b.data;this._build(a)}}else{var g=settings.data,colModel=settings.colModel;var h=this._getRow(e,g,b);$.extend(h.data,c);for(var i=0;i<colModel.length;i++){if(colModel[i].type!=="checkbox"){var j=colModel[i].index;h.$row.find("td")[i].innerHTML=h.data[j]?h.data[j]:"&nbsp;"}}if(settings.expendRow){$(h.$row.find("tr")[1]).find("td").html(c[settings.expendRow.index]?c[settings.expendRow.index]:"&nbsp;")}}},_getRowsTable:function(a,b,c){var d=this._getInst(a);var e=d.settings;if(!b){return e.selectedRows}var f=[];for(var i=0;i<e.data.length;i++){var g=e.data[i].groupData;for(var h in g){if(g[h][b]===c){f.push(g[h])}}}return f},_destroyTable:function(a){var b=this._getInst(a);$.removeData(a,o);$("#"+b.id).remove()},_selectedTable:function(a,b){var c=this._getInst(a);var d=c.id,settings=c.settings;var e=c.settings.data,styleClass=this._getDefaults(this._defaults,settings,"styleClass");for(var f in e){var g=e[f].groupData;for(var h in g){if(b===g[h].uuuid){settings.selectedRows.push(g[h]);$.unique(settings.selectedRows);var i=$($("#"+d+"SubTable"+f+" tbody")[h]);i.addClass(styleClass.lineSelectedClass);i.find("input").attr("checked","checked")}}}},_unSelectedTable:function(a,b){var c=this._getInst(a);var d=c.id,settings=c.settings;var e=c.settings.data,styleClass=this._getDefaults(this._defaults,settings,"styleClass");for(var f in e){var g=e[f].groupData;for(var h in g){if(b===g[h].uuuid){var j=settings.selectedRows;for(var i=0;i<j.length;i++){if(j[i].uuuid===b){j.splice(i,1)}}var k=$($("#"+d+"SubTable"+f+" tbody")[h]);k.removeClass(styleClass.lineSelectedClass);k.find("input").removeAttr("checked")}}}}});$.fn.table=function(a){var b=Array.prototype.slice.call(arguments);if(typeof a==='string'){b.shift();return $.table['_'+a+'Table'].apply($.table,[this[0]].concat(b))}return this.each(function(){$.table._attach(this,a)})};$.table=new p();window["DP_jQuery_"+n]=$})(jQuery);
(function($){$.fn.extend({dialog:{version:"0.0.1.4",author:"lly219@gmail.com"}});var m=new Date().getTime();var n='dialog';var o=function(){this._defaults={"styleClass":{"background":"dialog-background","panel":"dialog-panel","main":"dialog-main","footer":"dialog-footer","headerLeft":"dialog-header-left","headerRight":"dialog-header-right","headerMiddle":"dialog-header-middle","headerBg":"dialog-header-bg","closeIcon":"dialog-close-icon","closeIconHover":"dialog-close-icon-hover","title":"dialog-title","buttonRight":"dialog-button-right"}}};$.extend(o.prototype,{_attach:function(a,b){if(!a.id){this.uuid++;a.id='dp'+this.uuid}var c=this._newInst($(a));c.settings=$.extend({},b||{});$.data(a,n,c);this._init(a)},_newInst:function(a){var b=a[0].id.replace(/([^A-Za-z0-9_])/g,'\\\\$1');return{id:b}},_getInst:function(a){try{return $.data(a,n)}catch(err){throw'Missing instance data for this dialog';}},_destroyDialog:function(a){var b=$.dialog._getInst(a);var c=b.id;$.removeData(a,n);$(a).prependTo("#"+c+"Wrap").unwrap();$(a).removeAttr("style");var d=this._getDefaults($.dialog._defaults,b.settings,"styleClass");$("."+d.background).remove();$("#"+c+"Dialog").remove()},_init:function(b){var c=this._getInst(b);var d=c.id,settings=c.settings;var e=this._getDefaults($.dialog._defaults,settings,"styleClass"),height=settings.height,width=settings.width;settings.title=settings.title?settings.title:"";settings.okText=settings.okText?settings.okText:"Ok";settings.cancelText=settings.cancelText?settings.cancelText:"Cancel";var f="",headerHTML="<div class='"+e.headerLeft+"'></div><div class='"+e.headerBg+"' style='width: "+(width+18)+"px;'><div class='"+e.title+"'>"+settings.title+"</div><a href='javascript:void(0);' class='"+e.closeIcon+"'></a></div><div class='"+e.headerRight+"'></div><div class='clear'></div>";if(!settings.hideFooter){f="<a href='javascript:void(0);'><span>"+settings.okText+"</span><span class='"+e.buttonRight+"'></span></a><a href='javascript:void(0);'><span>"+settings.cancelText+"</span><span class='"+e.buttonRight+"'></span></a>"}var g="<div id='"+d+"Dialog' class='"+e.panel+"' style='width: "+(width+26)+"px;' onselectstart='return false;'><div>"+headerHTML+"</div><div class='"+e.main+"'><div style='overflow: auto; height: "+height+"px; width: "+width+"px;'></div><div class='"+e.footer+"'>"+f+"</div><div class='clear'></div></div>";var h="";if(settings.modal&&$("."+e.background).length===0){var i=$(window).height()<$("body").height()?$("body").height():$(window).height();h="<div style='height:"+i+"px;' class='"+e.background+"'></div>"}$("#"+d).wrap("<div id='"+d+"Wrap'></div>");var j=$(b).clone(true);$(b).remove();$('body').append(h+g);$($("#"+d+"Dialog ."+e.main+" div").get(0)).append(j);$(j).show();var k="",left="",$dialog=$("#"+d+"Dialog");if(settings.position){k=settings.position.top;left=settings.position.left}else{k=($(window).height()-$dialog.height())/2;left=($(window).width()-$dialog.width())/2}$dialog.css({"top":k+"px","left":left+"px"});$("#"+d+"Dialog ."+e.closeIcon).bind("click",function(){$.dialog._close(d,settings)});var l=$("#"+d+"Dialog ."+e.footer+" a");$(l.get(1)).bind("click",function(){$.dialog._close(d,settings)});$(l.get(0)).bind("click",function(){if(settings.ok===undefined||settings.ok()){$.dialog._close(d,settings)}});this._bindMove(d,e.headerBg,height,width);$(window).resize(function(){var a=$(window).height()<document.documentElement.clientHeight?document.documentElement.clientHeight:$(window).height();$("."+e.background).height(a)})},_bindMove:function(f,g){$("#"+f+"Dialog ."+g).mousedown(function(c){var d=document;if(!c){c=window.event}var e=document.getElementById(f+"Dialog");var x=c.clientX-parseInt(e.style.left),y=c.clientY-parseInt(e.style.top);d.ondragstart="return false;";d.onselectstart="return false;";d.onselect="document.selection.empty();";if(this.setCapture){this.setCapture()}else if(window.captureEvents){window.captureEvents(Event.MOUSEMOVE|Event.MOUSEUP)}d.onmousemove=function(a){if(!a){a=window.event}var b=a.clientX-x,positionY=a.clientY-y;if(b<0){b=0}if(b>$(window).width()-$(e).width()){b=$(window).width()-$(e).width()}if(positionY<0){positionY=0}if(positionY>$(window).height()-$(e).height()){positionY=$(window).height()-$(e).height()}e.style.left=b+"px";e.style.top=positionY+"px"};d.onmouseup=function(){if(this.releaseCapture){this.releaseCapture()}else if(window.captureEvents){window.captureEvents(Event.MOUSEMOVE|Event.MOUSEUP)}d.onmousemove=null;d.onmouseup=null;d.ondragstart=null;d.onselectstart=null;d.onselect=null}})},_close:function(a,b){if(b.close===undefined||b.close()){$("#"+a+"Dialog").hide();if(b.modal){var c=this._getDefaults($.dialog._defaults,b,"styleClass");$("."+c.background).hide()}}},_closeDialog:function(a){var b=this._getInst(a);var c=b.id,settings=b.settings;$.dialog._close(c,settings)},_openDialog:function(a){var b=this._getInst(a);var c=b.id,settings=b.settings;$("#"+c+"Dialog").show();if(settings.modal){var d=this._getDefaults($.dialog._defaults,settings,"styleClass");$("."+d.background).show()}},_updateDialog:function(a,b){var c=this._getInst(a);var d=c.id,settings=c.settings;var e=this._getDefaults($.dialog._defaults,settings,"styleClass");$.extend(settings,b);var f=$("#"+d+"Dialog");if(b.position){f.css({"top":b.position.top,"left":b.position.left})}if(b.width){f.width(b.width+26);f.find("."+e.main+" div")[0].style.width=b.width+"px";f.find("."+e.headerBg).width(b.width+18)}if(b.height){f.find("."+e.main+" div")[0].style.height=b.height+"px"}if(b.title){f.find("."+e.title).html(b.title)}if(b.modal!==undefined){if(b.modal){$("."+e.background).show()}else{$("."+e.background).hide()}}if(b.hideFooter!==undefined){if(b.hideFooter){f.find("."+e.footer).hide()}else{f.find("."+e.footer).show()}}},_getDefaults:function(a,b,c){if(c==="styleClass"){if(b.theme==="default"||b.theme===undefined){return a.styleClass}b.styleClass={};for(var d in a[c]){b.styleClass[d]=b.theme+"-"+a.styleClass[d]}}else if(c==="height"||c==="width"){if(b[c]===null||b[c]===undefined){return"auto"}else{return b[c]+"px"}}else{if(b[c]===null||b[c]===undefined){return a[c]}}return b[c]}});$.fn.dialog=function(a){var b=Array.prototype.slice.call(arguments);if(typeof a==='string'){b.shift();return $.dialog['_'+a+'Dialog'].apply($.dialog,[this[0]].concat(b))}return this.each(function(){$.dialog._attach(this,a)})};$.dialog=new o();window['DP_jQuery_'+m]=$})(jQuery);
(function($){$.fn.extend({completed:{version:"0.0.0.8",author:"lly219@gmail.com"}});var j=new Date().getTime();var k='completed';var l=function(){this._defaults={"styleClass":{"panelClass":"completed-panel"},separator:","},this._settingsDataFormat={}};$.extend(l.prototype,{_attach:function(a,b){if(!a.id){this.uuid++;a.id='dp'+this.uuid}var c=this._newInst($(a));c.settings=$.extend({},b||{});$.data(a,k,c);this._init(a)},_newInst:function(a){var b=a[0].id.replace(/([^A-Za-z0-9_])/g,'\\\\$1');return{id:b}},_getInst:function(a){try{return $.data(a,k)}catch(err){throw'Missing instance data for this completed';}},_destroyCompleted:function(){},_init:function(b){var c=this._getInst(b);var d=c.id,settings=c.settings,height=settings.height+"px";var e=$("#"+d);var f="<div id='"+d+"Panel' class='"+this._getDefaults($.completed._defaults,settings,"styleClass").panelClass+"' style='height:"+height+";'></div>";settings.data.sort();e.after(f).bind("keyup focus",{settings:settings},this._keyupAction);var g=$("#"+d+"Panel");settings.tipNum=0;g.width(e.width()-parseInt(g.css("padding-top"))-parseInt(g.css("padding-bottom"))).mouseover(function(){g.find("a").removeClass()});$(document).click(function(a){if(a.target.id!==d){g.hide()}})},_keyupAction:function(a){var b=a.data.settings,currentWordObj=$.completed._getCurrentWord(this,b);var c=$.completed._getMatchData(b.data,this.value,currentWordObj.currentWord);if(a.keyCode===38&&b.tipNum>0){b.tipNum--}if(a.keyCode===40&&b.tipNum<c.length-1){b.tipNum++}if(a.keyCode===13){$("#"+this.id+"Panel a").each(function(i){if(this.className==="selected"){b.tipNum=i}});if(c[b.tipNum]){var d=$.completed._defaults.separator;if(currentWordObj.currentWord===""){this.value=this.value+c[b.tipNum]+d}else{var e=this.value;this.value=e.substring(0,currentWordObj.startPos)+c[b.tipNum]+e.substring(currentWordObj.endPos,e.length)}c.splice(b.tipNum,1);b.tipNum=0}$(this).focus()}$.completed._buildPanel(this.id,c,b)},_getCurrentWord:function(a,b){var c=$(a).val(),tag=true,endPos=0,startPos=0,separator=$.completed._defaults.separator;if(c===""){return{currentWord:"",startPos:startPos,endPos:endPos}}if(document.selection){try{var d=document.selection.createRange();var f=a.createTextRange();f.collapse(true);f.select();var g=document.selection.createRange();g.setEndPoint("EndToEnd",d);b.curPos=g.text.length;d.select()}catch(e){delete e}}else{b.curPos=a.selectionStart}var h=b.curPos;for(var i=0;i<c.length;i++){if(c.charAt(i)===separator){if(i>=h&&tag){endPos=i;tag=false}}}if(tag===true){tag=false;endPos=c.length}for(var j=endPos;j>-1;j--){if(c.charAt(j)===separator){if(j<h&&!tag){startPos=j+1;tag=true}}}return{currentWord:c.substring(startPos,endPos),startPos:startPos,endPos:endPos}},_getMatchData:function(a,b,c){var d=b.split($.completed._defaults.separator);var e=[];for(var i=0;i<a.length;i++){if(typeof a[i]==="number"){a[i]=a[i].toString()}if(a[i].toLowerCase().indexOf(c.toLowerCase())>-1){e.push(a[i])}}for(var j=0;j<e.length;j++){for(var k=0;k<d.length;k++){if(e[j]===d[k].toString()){e.splice(j,1);j--}}}return e},_buildPanel:function(f,g,h){var j=$("#"+f+"Panel");if(g.length===0){j.html("").hide();return}var k="";for(var i=0;i<g.length;i++){if(h.tipNum===i){k+="<a href='javascript:void(0);'                                         onmouseout=\"this.className=''\"                                         onmousemove=\"this.className='selected'\" class='selected'>"+g[i]+"</a>"}else{k+="<a href='javascript:void(0);'                                         onmouseout=\"this.className=''\"                                         onmousemove=\"this.className='selected'\">"+g[i]+"</a>"}}j.html(k).show();var l=$("#"+f+"Panel a.selected");if(l.position().top+j.scrollTop()>50-l.height()){j.scrollTop(l.position().top+j.scrollTop()+l.height()-50)}if(l.position().top<0){j.scrollTop(j.scrollTop-l.height())}$("#"+f+"Panel a").click(function(){var a=document.getElementById(f);var b=$.completed._getCurrentWord(document.getElementById(f),h);var c=$.completed._getMatchData(h.data,a.value,b.currentWord);$("#"+f+"Panel a").each(function(i){if(this.className==="selected"){h.tipNum=i}});if(c[h.tipNum]){var d=$.completed._defaults.separator;if(b.currentWord===""){a.value=a.value+c[h.tipNum]+d}else{var e=a.value;a.value=e.substring(0,b.startPos)+c[h.tipNum]+e.substring(b.endPos,e.length)}c.splice(h.tipNum,1);h.tipNum=0}$.completed._buildPanel(f,c,h)})},_getDefaults:function(a,b,c){if(c==="styleClass"){if(b.theme==="default"||b.theme===undefined){return a.styleClass}b.styleClass={};for(var d in a[c]){b.styleClass[d]=b.theme+"-"+a.styleClass[d]}}else if(c==="height"||c==="width"){if(b[c]===null||b[c]===undefined){return"auto"}else{return b[c]+"px"}}else{if(b[c]===null||b[c]===undefined){return a[c]}}return b[c]}});$.fn.completed=function(a){var b=Array.prototype.slice.call(arguments);return this.each(function(){typeof a=='string'?$.completed['_'+a+'Completed'].apply($.completed,[this].concat(b)):$.completed._attach(this,a)})};$.completed=new l();window['DP_jQuery_'+j]=$})(jQuery);
(function($){$.fn.extend({tip:{version:"0.0.0.3",author:"lly219@gmail.com"}});var f=new Date().getTime();var g='tip';var h=function(){this._defaults={"styleClass":{"panel":"tip-panel"}},this._settingsDataFormat={}};$.extend(h.prototype,{_attach:function(a,b){if(!a.id){this.uuid++;a.id='dp'+this.uuid}var c=this._newInst($(a));c.settings=$.extend({},b||{});$.data(a,g,c);this._init(a)},_newInst:function(a){var b=a[0].id.replace(/([^A-Za-z0-9_])/g,'\\\\$1');return{id:b}},_getInst:function(a){try{return $.data(a,g)}catch(err){throw'Missing instance data for this tip.';}},_destroyTip:function(a){$.removeData(a,g);$("#"+a.id+"Panel").remove()},_init:function(a){var b=this._getInst(a);var c=b.id,settings=b.settings;var d='',styleClass=settings.className?settings.className:this._getDefaults($.tip._defaults,settings,"styleClass").panel;d="<div id='"+c+"Panel' class='"+styleClass+"'>"+settings.content+"</div>";$(settings.appendId?"#"+settings.appendId:"body").append(d);$(a).hover(function(){$.tip._parsePosition(settings,a);$("#"+c+"Panel").fadeIn("normal")},function(){$("#"+c+"Panel").fadeOut("normal")})},_optionTip:function(a,b,c){var d=$.tip._getInst(a[0]);var e=d.settings;if(c){e[b]=c;$("#"+a[0].id+"Panel").html(c)}return e[b]},_parsePosition:function(a,b){var c="",$targetPanel=$("#"+b.id+"Panel");if(a.left===undefined&&a.right===undefined&&a.bottom===undefined&&a.top===undefined&&a.position===undefined){a.position="bottom"}if(a.position){var d=$(b);switch(a.position){case"top":c="left: "+parseInt(d.position().left)+"px; top: "+parseInt(d.position().top-$targetPanel.height()-6-parseInt(d.css("padding-top"))-parseInt($targetPanel.css("padding-top")))+"px;";break;case"bottom":c="left: "+parseInt(d.position().left)+"px; top: "+parseInt(d.position().top+d.height())+"px;";break;default:alert("Has no type!");break}$targetPanel.attr("style",c);return}if(a.left!==undefined){c+="left:"+a.left+"px;"}if(a.top!==undefined){c+="top:"+a.top+"px;"}if(a.bottom!==undefined){c+="bottom:"+a.bottom+"px;"}if(a.right!==undefined){c+="right:"+a.right+"px;"}$targetPanel.attr("style",c)},_getDefaults:function(a,b,c){if(c==="styleClass"){if(b.theme==="default"||b.theme===undefined){return a.styleClass}b.styleClass={};for(var d in a[c]){b.styleClass[d]=b.theme+"-"+a.styleClass[d]}}else if(c==="height"||c==="width"){if(b[c]===null||b[c]===undefined){return"auto"}else{return b[c]+"px"}}else{if(b[c]===null||b[c]===undefined){return a[c]}}return b[c]}});$.fn.tip=function(a){var b=Array.prototype.slice.call(arguments);if(a==="option"){b.shift();return $.tip['_'+a+'Tip'].apply($.tip,[this].concat(b))}return this.each(function(){typeof a=='string'?$.tip['_'+a+'Tip'].apply($.tip,[this].concat(b)):$.tip._attach(this,a)})};$.tip=new h();window['DP_jQuery_'+f]=$})(jQuery);
            (function ($) {
    $.fn.extend({
        tabs: {
            version: "0.0.1.6",
            author: "lly219@gmail.com"
        }
    });

    var dpuuid = new Date().getTime();
    var PROP_NAME = 'tabs';

    var Tabs = function () {
        this._defaults = {
            "styleClass": {
                "leftSelected": "tabs-left-selected",
                "rightSelected": "tabs-right-selected",
                "left": "tabs-left",
                "right": "tabs-right",
                "leftSelectedRight": "tabs-left-selected-right",
                "leftRight": "tabs-left-right",
                "leftRightSelected": "tabs-left-right-selected",
                "middle": "tabs-middle",
                "middleSelected": "tabs-middle-selected",
                "nav": "tabs-nav",
                "content": "tabs-content",
                "tabsBG": "tabs-tabs-bg",
                "closeIcon": "tabs-close-icon",
                "hover": "tabs-hover"
            }
        }
    };

    $.extend(Tabs.prototype, {
        _attach: function (target, settings) {
            if (!target.id) {
                this.uuid++;
                target.id = 'dp' + this.uuid;
            }
            var inst = this._newInst($(target));

            inst.settings = $.extend({
                length: 0
            }, settings || {});
            $.data(target, PROP_NAME, inst);
            this._init(target);
        },

        /* Create a new instance object. */
        _newInst: function (target) {
            // escape jQuery meta chars
            var id = target[0].id.replace(/([^A-Za-z0-9_])/g, '\\\\$1');
            return {
                id: id
            };
        },

        _getInst: function (target) {
            try {
                return $.data(target, PROP_NAME);
            } catch (err) {
                throw 'Missing instance data for this tabs';
            }
        },

        _init: function (target) {
            var inst = this._getInst(target);
            var id = inst.id,
            settings = inst.settings;
            var styleClass = this._getDefaults(this._defaults, settings, "styleClass"),
            $tabs = undefined;
            target.className = styleClass.tabsBG;

            if (settings.data) {
                // set tabs panel height.
                var heightStyle = settings.height ? " style='height:" + settings.height + "px;'" : "";

                target.innerHTML = "<ul class='" + styleClass.nav
                + "'></ul>";
                $(target).after("<div id='" + id + "Content' class='"
                    + styleClass.content + "'" + heightStyle + "></div>");
                this._buildHTML(target);
                $tabs = $(target).find("li");
            } else {
                $tabs = $(target).find("li");
                settings.data = [];

                // set tabs style.
                $(target).find("ul").addClass(styleClass.nav);

                var $tabsPanels = $("#" + id + "Content div"),
                $tabsContent = $("#" + id + "Content");
                $tabsContent.addClass(styleClass.content);

                // set tabs panel height.
                if (settings.height) {
                    $tabsContent.height(settings.height);
                }

                for (var i = 0; i < $tabs.length; i++) {
                    // set data.
                    settings.data[i] = {};
                    settings.data[i].text = $tabs.get(i).innerHTML;
                    settings.data[i].content = $tabsPanels.get(i).innerHTML;
                    settings.data[i].id = $($tabs.get(i).children[0]).data("index");

                    // build tabs HTML.
                    if (i !== $tabs.length - 1) {
                        $tabs.get(i).innerHTML = "<div></div>" + $tabs.get(i).innerHTML;
                    } else {
                        $tabs.get(i).innerHTML = "<div></div>"
                        + $tabs.get(i).innerHTML + "<div></div>";
                    }
                }
            }

            this._setCurrentTab(target, settings.data[0].id);

            // bind change tab event.
            this._changeTab(target, $tabs);

            // bind close event.
            this._close(target, $tabs);

            // bind user event
            this._bindEvent(target, $tabs);

            if (typeof(settings.load) === "function") {
                settings.load();
            }
        },

        _buildHTML: function (target) {
            var inst = this._getInst(target);
            var settings = inst.settings,
            id = inst.id;
            var data = settings.data,
            tabsHTML = "",
            contentsHTML = "";

            for (var i = 0; i < data.length; i++) {
                var tabContentHTML = {};
                tabContentHTML = this._buildTabPanelHTML(target, data[i]);
                tabsHTML += tabContentHTML.tabHTML;
                contentsHTML += tabContentHTML.contentHTML;
            }
            $(target).find("ul").html(tabsHTML);
            $("#" + id + "Content").html(contentsHTML);
        },

        _buildTabPanelHTML: function (target, data) {
            var inst = this._getInst(target);
            var settings = inst.settings,
            id = inst.id,
            styleClass = this._getDefaults(this._defaults, settings, "styleClass");
            var datas = settings.data;

            var tabHTML = "",
            contentHTML = "",
            lastHTML = "",
            text = data.text;

            var alt = data.alt ? data.alt : data.text ;
            if (data.altCount && data.altCount < text.length && text.indexOf("</") < 0) {
                text = text.substr(0, data.altCount) + "...";
            }
            text += data.button ? "<span id='" + id + "_" + data.id
            + "_button'>" + data.button + "</span>": "";
            // build tab HTML.
            if (datas[datas.length - 1].id === data.id.toString()) {
                lastHTML = "<div></div>";
            }
            if (data.isClose) {
                tabHTML = "<li><div></div><div data-index='" + data.id + "' title='"
                + alt + "'><span class='left'>" + text + "</span><a  href='javascript:void(0);' class='"
                + styleClass.closeIcon + "'></a></div>" + lastHTML + "</li>";
            } else {
                tabHTML = "<li><div></div><div data-index='" + data.id + "' title='"
                + alt + "'>" + text + "</div>" + lastHTML + "</li>";
            }

            // build tab panel HTML.
            var contentId = id + "_" + data.id;
            var content = data.content;
            if (data.url) {
                var iframeHeight = this._calculateIframeHeight(settings.height, id);
                content = "<iframe id='" + contentId + "_iframe' src='" + data.url
                + "' frameborder='0' width='100%' height='"
                + iframeHeight + "' style='height:" + iframeHeight + ";'></iframe>";
            }
            contentHTML = "<div id='" + contentId + "'>" + content + "</div>";

            return {
                "tabHTML": tabHTML,
                "contentHTML": contentHTML
            }
        },

        _changeTab: function (target, $tabs, index) {
            if (index !== undefined) {
                $($tabs.get(index)).bind("click", function () {
                    $.tabs._changeTabFunction(this, target);
                }).mouseover(function () {
                    this.className = "hover";
                }).mouseout(function () {
                    this.className = "";
                });
            } else {
                $tabs.each(function () {
                    $(this).bind("click", function () {
                        $.tabs._changeTabFunction(this, target);
                    });
                }).mouseover(function () {
                    this.className = "hover";
                }).mouseout(function () {
                    this.className = "";
                });
            }
        },

        _changeTabFunction: function (it, target) {
            var inst = this._getInst(target);
            var styleClass = this._getDefaults(this._defaults, inst.settings, "styleClass");
            var $middle = $($(it).find("div")[1]);
            if ($middle.hasClass(styleClass.middleSelected)) {
                return;
            }
            this._setCurrentTab(target, $middle.data("index"));
        },

        _setCurrentTab: function (target, id) {
            var inst = this._getInst(target);
            var settings = inst.settings;
            var data = settings.data,
            styleClass = this._getDefaults(this._defaults, settings, "styleClass"),
            $tabs = $(target).find("li");
            for (var i = 0; i < data.length; i++) {
                var $content = $("#" + target.id + "_" + data[i].id);
                $("#" + inst.id + "_" + data[i].id + "_button").hide();
                if (id.toString() === data[i].id) {
                    if (i === 0) {
                        $tabs.get(i).children[0].className = styleClass.leftSelected;
                        if (data.length === 1) {
                            $tabs.get(i).children[2].className = styleClass.rightSelected;
                        }
                    } else if (i === data.length - 1) {
                        $tabs.get(i).children[0].className = styleClass.leftRightSelected;
                        $tabs.get(i).children[2].className = styleClass.rightSelected;
                    } else {
                        $tabs.get(i).children[0].className = styleClass.leftRightSelected;
                    }
                    $tabs.get(i).children[1].className = styleClass.middleSelected;
                    if (data[i].reload && !data[i].content) {
                        document.getElementById(data[i].id + "Iframe").contentWindow.location.href = data[i].url;
                    }
                    $content.show();

                    $("#" + inst.id + "_" + data[i].id + "_button").show();
                } else {
                    if (i === 0) {
                        $tabs.get(i).children[0].className = styleClass.left;
                    } else {
                        if (id.toString() === data[i - 1].id) {
                            $tabs.get(i).children[0].className = styleClass.leftSelectedRight;
                        } else {
                            $tabs.get(i).children[0].className = styleClass.leftRight;
                        }
                        if (i === data.length - 1) {
                            $tabs.get(i).children[2].className = styleClass.right;
                        }
                    }
                    $tabs.get(i).children[1].className = styleClass.middle;
                    $content.hide();
                }
            }
        },

        _bindEvent: function (target, $tabs, index) {
            var inst = this._getInst(target);
            var settings  = inst.settings;
            var bind = settings.bind,
            data = settings.data;
            if (settings.bind) {
                if (index !== undefined) {
                    for (var l = 0; l < bind.length; l++) {
                        $($tabs.get(index)).bind(bind[l].type, {
                            data: data[index],
                            index: l
                        }, function (event) {
                            bind[event.data.index].action(event, event.data.data);
                        });
                    }
                } else {
                    for (var i = 0; i < data.length; i++) {
                        for (var j = 0; j < bind.length; j++) {
                            $($tabs.get(i)).bind(bind[j].type, {
                                data: data[i],
                                index: j
                            }, function (event) {
                                bind[event.data.index].action(event, event.data.data);
                            });
                        }
                    }
                }
            }
        },

        _close: function (target, $tabs, index) {
            var inst = this._getInst(target);
            var styleClass = this._getDefaults(this._defaults, inst.settings, "styleClass");
            if (index !== undefined) {
                $($tabs[index]).find("." + styleClass.closeIcon).bind("click", function (event) {
                    $.tabs._closeFunction(target,
                        $(event.currentTarget.parentNode).data("index"));
                });
            } else {
                $tabs.find("." + styleClass.closeIcon).bind("click", function (event) {
                    $.tabs._closeFunction(target,
                        $(event.currentTarget.parentNode).data("index"));
                });
            }
        },

        _closeFunction: function (target, currentId) {
            var inst = this._getInst(target);
            var settings = inst.settings;
            var data = settings.data,
            styleClass = this._getDefaults(this._defaults, inst.settings, "styleClass"),
            $tabs = $(target).find("li");

            var index = this._getIndexById(data, currentId.toString());

            // close event
            if (typeof(settings.close) === "function") {
                if (!settings.close(data[index])) {
                    return;
                }
            }

            // remove tab content
            $("#" + target.id + "_" + currentId).remove();

            var $middle = $($($tabs.get(index - 1)).find("div")[1]);
            // if remove last tab, new current tab should be add <div></div>.
            if (index === data.length - 1) {
                if ($middle.hasClass(styleClass.middleSelected)) {
                    $middle.after("<div class='" + styleClass.rightSelected + "'></div>");
                } else {
                    $middle.after("<div class='" + styleClass.right + "'></div>");
                }
            }

            // remove tab is last but one and current tab is the last but two.
            if (index === data.length - 2
                && $middle.hasClass(styleClass.middleSelected)) {
                $tabs.get(index + 1).children[0].className = styleClass.leftSelectedRight;
            }

            // remove tab
            $($tabs.get(index)).remove();

            // sync data
            data.splice(index, 1);

            // set new current tab
            if ($($($tabs.get(index)).find("div")[1]).hasClass(styleClass.middleSelected)) {
                if (index === 0) {
                    index++;
                }
                this._setCurrentTab(target, data[index -1].id);
            }

            // stop bubbling
            if (currentId.currentTarget) {
                currentId.stopPropagation();
            }
        },

        _getDefaults: function (defaults, settings, key) {
            if (key === "styleClass") {
                if (settings.theme === "default" || settings.theme === undefined) {
                    return defaults.styleClass;
                }
                settings.styleClass = {};
                for (var styleName in defaults[key]) {
                    settings.styleClass[styleName] =  defaults.styleClass[styleName] + "-" + settings.theme;
                }
            } else if ((key === "height" && settings[key] !== "auto") || key === "width") {
                if (settings[key] === null || settings[key] === undefined) {
                    return defaults[key] + "px";
                } else {
                    return settings[key] + "px";
                }
            } else {
                if (settings[key] === null || settings[key] === undefined) {
                    return defaults[key];
                }
            }
            return settings[key];
        },

        _calculateIframeHeight: function (height, id) {
            var $tabContent = $("#" + id + "Content");
            var paddingTop = $tabContent.css("padding-top"),
            paddingBottom = $tabContent.css("padding-bottom");
            //borderTop = $tabContent.css("border-top-width"),
            //borderBottom = $tabContent.css("border-bottom-width");
            return height - parseInt(paddingTop) - parseInt(paddingBottom) + "px";
        },

        _getIndexById: function (data, tabId) {
            for (var i in data) {
                if (data[i].id === tabId) {
                    return parseInt(i);
                }
            }
        },

        _addTabs: function (target, addData) {
            var inst = this._getInst(target);
            var settings = inst.settings;
            var data = settings.data;
            addData.id = addData.id.replace(/(^\s*)|(\s*$)/g,"").toString();
            var index = data.length;
            // trigger custom callback
            if (typeof(settings.add) === "function") {
                // TODO: arguments
                var isAdd = settings.add(addData);
                if (!isAdd) {
                    return;
                }
            }

            // tab 数目限制
            if (settings.size){
                if (data.length >= settings.size) {
                    alert("对不起，只能打开" + settings.size + "个窗口");
                    return;
                }
            }

            // 当添加 id 重复的 tab 时，设置此 id 的 tab 为 current tab.
            for (var i = 0; i < data.length; i++) {
                if (data[i].id === addData.id) {
                    this._setCurrentTab(target, addData.id);
                    return;
                }
            }

            settings._count++;

            // sync data.
            data.splice(index, 0, addData);
            if (addData.id) {
                data[index].id = addData.id;
            } else {
                data[index].id = inst.id + "Content" + settings._count;
            }

            // append HTML.
            var tabContentHTMl = this._buildTabPanelHTML(target, data[index]);

            // only last li like this: <ul><li><div></div><a></a><div></div></li></ul>. So before add, remove last div.
            if (data.length - 1 === index) {
                $(target).find("ul li div").last().remove();
            }
            if (index === 0) {
                $($(target).find("li").get(index)).before(tabContentHTMl.tabHTML);
            } else {
                $($(target).find("li").get(index - 1)).after(tabContentHTMl.tabHTML);
            }

            $("#" + inst.id + "Content").append(tabContentHTMl.contentHTML);

            var $tabs = $(target).find("li");

            this._setCurrentTab(target, data[index].id);

            // bind change tab event
            this._changeTab(target, $tabs, index);

            // bind close event.
            this._close(target, $tabs, index);

            // bind user event.
            this._bindEvent(target, $tabs, index);
        },

        _lengthTabs: function (target) {
            var inst = this._getInst(target);
            return inst.settings.data.length;
        },

        _selectTabs: function (target, id) {
            this._setCurrentTab(target, id);
        },

        _removeTabs: function (target, currentId) {
            var inst = this._getInst(target);
            var settings = inst.settings,
            styleClass = this._getDefaults(this._defaults, settings, "styleClass");
            var $tabs = $(target).find("li");
            if (settings.closeSyn) {
                $tabs.find("#" + currentId + " ." + styleClass.closeIcon).click();
            } else {
                this._closeFunction(target, currentId);
            }
        },

        _getTabTabs: function (target, tabId, tag) {
            var inst = this._getInst(target);
            var settings = inst.settings;
            var data = settings.data,
            styleClass = this._getDefaults(this._defaults, settings, "styleClass"),
            currentData = {},
            index = 0;
            if (tabId) {
                index = this._getIndexById(data, tabId);
                currentData = data[index];
            } else {
                $(target).find("li").each(function (k) {
                    var $it = $(this);
                    if ($($it.find("div")[1]).hasClass(styleClass.middleSelected)) {
                        currentData = data[k];
                        index = k;
                    }
                });
            }
            if (tag) {
                index = parseInt(index);
                switch (tag) {
                    case "next":
                        if (index < data.length - 1) {
                            currentData = data[index + 1];
                        }
                        break;
                    case "pre":
                        if (index > 0) {
                            currentData = data[index - 1];
                        }
                        break;
                    default:
                        alert("get tab error, has no type!");
                        break;
                }
            }
            return currentData;
        },

        _destroyTabs: function (target) {
            var $target = $(target);
            var inst = this._getInst(target);
            var settings = inst.settings,
            styleClass = this._getDefaults(this._defaults, settings, "styleClass");
            $.removeData(target, PROP_NAME);
            $target.removeClass(styleClass.tabsBG).empty();
            $("#" + inst.id + "Content").remove();
        },

        _updateTabs: function (target, updateData, tabId) {
            var inst = this._getInst(target);
            var settings = inst.settings,
            $tabs = $(target).find("li");
            var data = settings.data;
            // update settings
            if (tabId === undefined) {
                // update height
                $.extend(settings, updateData);
                $("#" + target.id + "Content").height(updateData.height);
                var dataTemp = settings.data;
                for (var j = 0; j < dataTemp.length; j++) {
                    var $iframe = $("#" + inst.id + "_" + dataTemp[j].id + "_iframe");
                    if (dataTemp[j].url && $iframe.length === 1) {
                        $iframe.height(updateData.height);
                        $iframe.attr("height", updateData.height);
                    }
                }
                return ;
            }

            // update tab
            var index = this._getIndexById(data, tabId);

            var  count = updateData.altCount ? updateData.altCount : data[index].altCount,
            url = updateData.url ? updateData.url : data[index].url,
            text = updateData.text ? updateData.text : data[index].text,
            alt = text,
            $tabPanel = $("#" + inst.id + "_" + data[index].id);
            if (count < text.length && text.indexOf("</") < 0) {
                text = text.substr(0, count) + "...";
            }

            if (data[index].close) {
                $($($tabs[index]).find("span")[0]).html(text).attr("title", alt);
            } else {
                $($($tabs.get(index)).find("div")[1]).html(text).attr("title", alt);
            }

            if (updateData.content) {
                $tabPanel.html(updateData.content);
            } else {
                // TODO: resize window and then update, IE cann't parse iframe 100%.
                $("#" + inst.id + "_" + data[index].id + "_iframe").attr("src", url).width($tabPanel.width());
                setTimeout(function () {
                    $("#" + inst.id + "_" + data[index].id + "_iframe").width("100%");
                }, 500);
            }
            $.extend(data[index], updateData);
        },

        _bindTabs: function (target, bindData, tabId) {
            var inst = this._getInst(target);
            var data = inst.settings.data,
            index = this._getIndexById(data, tabId);
            data[index].bind = bindData;
            var $tab = $($(target).find("li").get(index));
            for (var i = 0; i < bindData.length; i++) {
                $tab.bind(bindData[i].type, {
                    data: data[index]
                }, bindData[i].action);
            }
        },

        _unbindTabs: function (target, type, tabId) {
            var inst = this._getInst(target);
            var index = this._getIndexById(inst.settings.data, tabId),
            bindData = inst.settings.data[index].bind;
            for (var i in bindData) {
                if (bindData[i].type === type) {
                    $($(target).find("li").get(index)).unbind(type, bindData[i].action);
                }
            }
        }
    });

    $.fn.tabs = function (options) {
        var otherArgs = Array.prototype.slice.call(arguments);

        if (typeof options === 'string') {
            otherArgs.shift();
            return $.tabs['_' + options + 'Tabs'].apply($.tabs, [this[0]].concat(otherArgs));
        }
        return this.each(function () {
            $.tabs._attach(this, options);
        });
    };

    $.tabs = new Tabs();

    // Add another global to avoid noConflict issues with inline event handlers
    window['DP_jQuery_' + dpuuid] = $;
})(jQuery);