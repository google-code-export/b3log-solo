/*
 * Copyright (C) 2010, Liyuan Li
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
(function($){var Bowknot=function(){};$.extend(Bowknot.prototype,{bowknot:{version:"0.0.0.8",author:"lly219@gmail.com"},getDefaults:function(defaults,settings,key){if(key==="styleClass"){if(settings.theme==="default"||settings.theme===undefined){return defaults.styleClass}settings.styleClass={};for(var styleName in defaults[key]){settings.styleClass[styleName]=settings.theme+"-"+defaults.styleClass[styleName]}}else if((key==="height"&&settings[key]!=="auto")||key==="width"){if(settings[key]===null||settings[key]===undefined){return defaults[key]+"px"}else{return settings[key]+"px"}}else{if(settings[key]===null||settings[key]===undefined){return defaults[key]}}return settings[key]},strToInt:function(str){if(!str){return;}return parseInt(str.substring(0,str.length-2))},sortNumber:function(a,b){return a-b},getMaxNumber:function(arr){arr.sort(this.sortNumber);return arr[arr.length-1]},getMinNumber:function(arr){arr.sort(this.sortNumber);return arr[0]},getDate:function(a,b){var c=new Date(a);var d=c.getFullYear(),month=c.getMonth()+1,day=c.getDate(),hours=c.getHours(),seconds=c.getSeconds(),minutes=c.getMinutes();if(month<10){month="0"+month.toString()}if(day<10){day="0"+day.toString()}if(hours<10){hours="0"+hours.toString()}if(minutes<10){minutes="0"+minutes.toString()}if(seconds<10){seconds="0"+seconds.toString()}switch(b){case undefined:return d+"-"+month+"-"+day;break;case 1:return d+"-"+month+"-"+day+" "+hours+":"+minutes+":"+seconds;break;default:return false;break}},ellipsis:function(a,b){var c=0,strTrim=a.replace(/(^\s*)|(\s*$)/g,""),strArray=strTrim.split(""),resultStr="";for(var i=0;i<strArray.length;i++){if(c<b){if(strArray[i]&&strArray[i].match(/[^u4E00-u9FA5]/)){c+=2}else{c++}resultStr+=strArray[i]}}if(strTrim!==resultStr){resultStr+="..."}return resultStr},trimUnique:function(a){for(var i=0;i<a.length;i++){a[i]=a[i].replace(/(^\s*)|(\s*$)/g,"");if(a[i]===""){a.splice(i,1);i--}}return $.unique(a)},goTop:function(acceleration,time){acceleration=acceleration||0.1;time=time||16;var x1=0;var y1=0;var x2=0;var y2=0;var x3=0;var y3=0;if(document.documentElement){x1=document.documentElement.scrollLeft||0;y1=document.documentElement.scrollTop||0}if(document.body){x2=document.body.scrollLeft||0;y2=document.body.scrollTop||0}var x3=window.scrollX||0;var y3=window.scrollY||0;var x=Math.max(x1,Math.max(x2,x3));var y=Math.max(y1,Math.max(y2,y3));var speed=1+acceleration;window.scrollTo(Math.floor(x/speed),Math.floor(y/speed));if(x>0||y>0){var invokeFunction="$.bowknot.goTop("+acceleration+", "+time+")";window.setTimeout(invokeFunction,time)}}});$.bowknot=new Bowknot()})(jQuery);
(function($){$.fn.extend({paginate:{version:"0.0.1.1",author:"lly219@gmail.com"}});var h=new Date().getTime();var k="paginate";var l=function(){this._defaults={"styleClass":{"pageCountClass":"pagination-pageCount","goPageClass":"pagination-goPage","prePageClass":"pagination-prePage","nextPageClass":"pagination-nextPage","lastPageClass":"pagination-lastPage","firstPageClass":"pagination-firstPage","prePageHoverClass":"pagination-prePageHover","nextPageHoverClass":"pagination-nextPageHover","lastPageHoverClass":"pagination-lastPageHover","firstPageHoverClass":"pagination-fitstPageHover","goInputClass":"pagination-goInput","submitClass":"pagination-submit","pageClass":"pagination-page","pageHoverClass":"pagination-pageHover","pageCurrentClass":"pagination-pageCurrent","paginationClass":"pagination-pagination"},"pageCount":1,"currentPage":1,"windowSize":5,"bindEvent":"","isGoTo":true,"isPageCount":true,"theme":"default","errorMessage":undefined,"style":"taobao","firstPage":"","lastPage":"","nextPage":"","previousPage":""}};$.extend(l.prototype,{_attach:function(a,b){if(!a.id){this.uuid++;a.id="dp"+this.uuid}var c=this._newInst($(a));c.settings=$.extend({},b||{});$.data(a,k,c);this._init(a)},_newInst:function(a){var b=a[0].id.replace(/([^A-Za-z0-9_])/g,"\\\\$1");return{id:b}},_getInst:function(a){try{return $.data(a,k)}catch(err){throw"Missing instance data for this pagination";}},_destroyPagination:function(){},_updatePagination:function(a,b){var c=this._getInst(a),settings=c.settings;for(var d in b){if(typeof(b[d])==="string"||d==="data"||typeof(b[d])==="number"){settings[d]=b[d]}else{settings[d]=$.extend(settings[d],b[d])}}$.paginate._build(a)},_init:function(a){var b=this._getInst(a);var c=b.id,settings=b.settings;$("#"+c).append("<div id='"+c+"Pagination' class='"+$.paginate._getDefaults($.paginate._defaults,settings,"styleClass").paginationClass+"'></div>");this._build(a)},_build:function(a){var b=this._getInst(a);var c=b.id,settings=b.settings;var d=$.paginate._getDefaults($.paginate._defaults,settings,"currentPage"),pageCount=settings.pageCount,pages=[],bindEvent=settings.bindEvent,styleClass=$.paginate._getDefaults($.paginate._defaults,settings,"styleClass");var e="",pageCountHTML="",goToPageHTML="",windowSize=$.paginate._getDefaults($.paginate._defaults,settings,"windowSize"),style=$.paginate._getDefaults($.paginate._defaults,settings,"style");if($.paginate._getDefaults($.paginate._defaults,settings,"isGoTo")){goToPageHTML="<div class='bowknot-left'>到</div><input class='"+styleClass.goInputClass+"' id='"+c+"PaginationInput'/><div class='bowknot-left'>页</div>&nbsp;<button class='"+styleClass.submitClass+"' id='"+c+"PaginationSubmit'>确定</button>"}if($.paginate._getDefaults($.paginate._defaults,settings,"isPageCount")){pageCountHTML="<div class='bowknot-left'>&nbsp;共"+pageCount+"页&nbsp;</div>"}switch(style){case"taobao":pages=this._getTaobaoPages(d,pageCount);break;case"google":pages=this._getGooglePages(d,pageCount,windowSize);break;default:alert("has no style!");break}for(var i=0;i<pages.length;i++){var f=" class='"+styleClass.pageClass+"'",currPageNumber=0,currDisplayPageNumber=0;if(pages[i]===d){f=" class='"+styleClass.pageCurrentClass+"'"}if(typeof(pages[i])==="number"){currPageNumber=currDisplayPageNumber=pages[i]}else{var g=pages[i].split("&");currPageNumber=parseInt(g[0]);currDisplayPageNumber=g[1];if(currDisplayPageNumber===">"){f=" class='"+styleClass.nextPageClass+"'"}if(currDisplayPageNumber==="<"){f=" class='"+styleClass.prePageClass+"'"}}e+="<span title='"+currPageNumber+"' onclick=\"jQuery.paginate._changePages('"+c+"');"+bindEvent+"("+currPageNumber+")\""+f+">"+currDisplayPageNumber+"</span>"}if(pages[0]!==1){if(settings.previousPage){e="<span class='"+styleClass.prePageClass+"' title='"+(d-1)+"' onclick=\"jQuery.paginate._changePages('"+c+"');"+bindEvent+"("+(d-1)+");\">"+settings.previousPage+"</span>"+e}if(settings.firstPage){e="<span title='1' class='"+styleClass.firstPageClass+"' onclick=\"jQuery.paginate._changePages('"+c+"');"+bindEvent+"(1);\">"+settings.firstPage+"</span>"+e}}if(pages[pages.length-1]!==pageCount){if(settings.nextPage){e+="<span class='"+styleClass.nextPageClass+"' title='"+(d+1)+"' onclick=\"jQuery.paginate._changePages('"+c+"');"+bindEvent+"("+(d+1)+");\">"+settings.nextPage+"</span>"}if(settings.lastPage){e+="<span class='"+styleClass.lastPageClass+"' title='"+pageCount+"' onclick=\"jQuery.paginate._changePages('"+c+"');"+bindEvent+"("+pageCount+");\">"+settings.lastPage+"</span>"}}$("#"+c+"Pagination").html(e+pageCountHTML+goToPageHTML);$("#"+c+"Pagination span").mouseover(function(){if($(this).hasClass(styleClass.prePageClass)){this.className=styleClass.prePageHoverClass}else if($(this).hasClass(styleClass.nextPageClass)){this.className=styleClass.nextPageHoverClass}else{$(this).addClass(styleClass.pageHoverClass)}}).mouseout(function(){if($(this).hasClass(styleClass.prePageHoverClass)){this.className=styleClass.prePageClass}else if($(this).hasClass(styleClass.nextPageHoverClass)){this.className=styleClass.nextPageClass}else{$(this).removeClass(styleClass.pageHoverClass)}});$("#"+c+"PaginationInput").bind("keypress",{target:a},$.paginate._goToPage).focus();$("#"+c+"PaginationSubmit").bind("click",{target:a},$.paginate._goToPage)},_changePages:function(a){var b=a;if(typeof(a)==="string"){b=$("#"+a)[0]}$.paginate._build(b)},_goToPage:function(a){var b=a.data.target;var c=$.paginate._getInst(b);var d=c.id,settings=c.settings;var e=parseInt($("#"+d+"PaginationInput").val());if(this.id.search(/PaginationInput/)!==-1&&a.keyCode!==13){return}settings.currentPage=parseInt($("#"+d+"PaginationInput").val());if(e>0&&e<=settings.pageCount){eval(settings.bindEvent+"("+e+");");$.paginate._changePages(d)}else if(settings.errorMessage){alert(settings.errorMessage);$("#"+d+"PaginationInput").val("")}},_getGooglePages:function(a,b,c){var d=[];if(b<c){for(var i=0;i<b;i++){d.push(i+1)}}else{var e=a-parseInt(c/2);e=e<1?1:e;e=e+c>b?b-c+1:e;for(var j=0;j<c;j++){d.push(e+j)}}return d},_getTaobaoPages:function(a,b){var c=[],i=2,len=4,begin=3,end=0,maxEnd=0,pre=0;if(a>=len){begin=a-Math.ceil(len/2);maxEnd=a+Math.ceil(len/2)+1;if(maxEnd<b){end=maxEnd}else{end=b}}else if(a<len){maxEnd=a+Math.ceil(len/2)+1;if(maxEnd<b){end=maxEnd}else{end=b}}if(begin<3){begin=3}for(i=begin;i<=end;i++){c.push(i)}if(begin>3){pre=2+(begin-2);c.unshift(pre+"&...")}if(b<2){i=(a===0)?0:1}else{i=2}for(;i>=1;i=i-1){c.unshift(i)}if(end<b){pre=end+Math.ceil(len/2);if(pre>b){pre=b}c.push(pre+"&...")}if(a>1){c.splice(0,0,(a-1)+"&<")}if(a<b){c.push((a+1)+"&>")}return c},_getDefaults:function(a,b,c){if(c==="styleClass"){if(b.theme==="default"||b.theme===undefined){return a.styleClass}b.styleClass={};for(var d in a[c]){b.styleClass[d]=b.theme+"-"+a.styleClass[d]}}else if((c==="height"&&b[c]!=="auto")||c==="width"){if(b[c]===null||b[c]===undefined){return a[c]+"px"}else{return b[c]+"px"}}else{if(b[c]===null||b[c]===undefined){return a[c]}}return b[c]}});$.fn.paginate=function(a){var b=Array.prototype.slice.call(arguments);return this.each(function(){if(a.update){$.paginate._updatePagination(this,a.update)}else{typeof a==="string"?$.paginate["_"+a+"Pagination"].apply($.paginate,[this].concat(b)):$.paginate._attach(this,a)}})};$.paginate=new l();window["DP_jQuery_"+h]=$})(jQuery);
/*
 * Copyright (C) 2010, Liyuan Li
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
(function ($) {
    $.fn.extend({
        table: {
            version: "0.0.0.1",
            author: "lly219@gmail.com"
        }
    });

    var dpuuid = new Date().getTime();
    var PROP_NAME = "table",
    SCROLLBAR_WIDTH = 17;

    // Table value.
    var Table = function () {
        // If these attributes undefined in new, should be use those default value.
        this._defaults = {
            "styleClass": {
                "highlightClass": "table-heiglight",
                "mainClass": "table-main",
                "bodyClass": "table-body",
                "headerClass": "table-header",
                "lineHoverClass": "table-lineHover",
                "oddRowClass": "table-oddRow",
                "evenRowClass": "table-evenRow"
            }
        },

        this._settingsDataFormat = {}
    };

    $.extend(Table.prototype, {
        _attach: function (target, settings) {
            if (!target.id) {
                this.uuid++;
                target.id = "dp" + this.uuid;
            }
            var inst = this._newInst($(target));

            inst.settings = $.extend({}, settings || {});
            $.data(target, PROP_NAME, inst);
            this._init(target);
        },

        /* Create a new instance object. */
        _newInst: function (target) {
            // escape jQuery meta chars
            var id = target[0].id.replace(/([^A-Za-z0-9_])/g, "\\\\$1");
            return {
                id: id
            };
        },

        _getInst: function (target) {
            try {
                return $.data(target, PROP_NAME);
            } catch (err) {
                throw "Missing instance data for this table";
            }
        },

        _destroyTable: function () {

        },

        _updateTable: function (target, updateSettings) {
            var inst = this._getInst(target),
            settings = inst.settings;

            for (var element in updateSettings) {
                if (typeof(updateSettings[element]) === "string" || typeof(updateSettings[element]) === "number"
                    || element === "data") {
                    settings[element] = updateSettings[element];
                } else {
                    settings[element] = $.extend(settings[element], updateSettings[element]);
                }
            }

            this._build(target);
        },

        _init: function (target) {
            var inst = this._getInst(target),
            settings = inst.settings;

            $(target).append("<div class='" + $.table._getDefaults($.table._defaults, settings, "styleClass").mainClass
                + "' id='" + inst.id + "Table'></div>");

            this._build(target);
        },

        _build: function (target) {
            var inst = this._getInst(target),
            settings = inst.settings;

            var resizable = $.table._getDefaults($.table._defaults, settings, "resizable"),
            styleClass = $.table._getDefaults($.table._defaults, settings, "styleClass"),
            height = $.table._getDefaults($.table._defaults, settings,"height"),
            tableWidth = this._getTableWidth(settings.colModel);

            var verticalLineHTML = resizable ? "<div class='"
            + styleClass.verticalLineClass + "' id='"
            + inst.id + "VerticalLine'></div>" : "";

            var tableHTML = verticalLineHTML + "<div id='"
            + inst.id + "TableHeader' class='" + styleClass.headerClass
            + "'></div>" + "<div id='" + inst.id + "TableMain' class='" + styleClass.bodyClass
            + "'></div>";

            $("#" + inst.id + "Table").html(tableHTML).css("position", "relative");

            this._buildHeader(target);
            if (settings.data || settings.subData) {
                this._buildBody(target, $.table._strToInt(height));
                this._bindEvent(target);
            }

            // when has scrollbar
            if (tableWidth.width === "100%") {
                $("#" + inst.id + "TableMain").css({
                    "min-width":tableWidth.minWidth
                });
                $("#" + inst.id + "TableHeader").css({
                    "min-width":tableWidth.minWidth
                });
                if ($("#" + inst.id + "TableMain").attr("offsetHeight")
                    > $.table._strToInt(height)) {
                    $("#" + inst.id + "TableHeader").css("padding-right", SCROLLBAR_WIDTH - 1);
                }
            } else {
                if ($("#" + inst.id + "TableMain").attr("offsetHeight")
                    > $.table._strToInt(height)) {
                    document.getElementById(inst.id + "TableMain").style.width = (tableWidth.width + SCROLLBAR_WIDTH) + "px";
                    document.getElementById(inst.id + "TableHeader").style.width = tableWidth.width + "px";
                } else {
                    document.getElementById(inst.id + "TableMain").style.width = tableWidth.width + "px";
                    document.getElementById(inst.id + "TableHeader").style.width = tableWidth.width + "px";
                }
            }
            document.getElementById(inst.id + "TableMain").style.height = height;
        },

        _buildHeader: function (target) {
            var settings = this._getInst(target).settings;
            var colModel = settings.colModel,
            id = this._getInst(target).id,
            styleClass = $.table._getDefaults($.table._defaults, settings, "styleClass"),
            tableWidth = this._getTableWidth(colModel),
            headerHTML = "<table cellpadding='0' cellspacing='0'><tr>";

            if (tableWidth.width === "100%") {
                headerHTML = "<table cellpadding='0' cellspacing='0' style='width:100%'><tr>"
            }

            for (var i = 0; i < colModel.length; i++) {
                if (colModel[i].visible === undefined) {
                    var checkboxId = id + "_" + colModel[i].index;
                    if (colModel[i].minWidth) {
                        headerHTML += "<th style='min-width:" + colModel[i].minWidth + "px;'>";
                    } else {
                        headerHTML += "<th style='width:" + colModel[i].width + "px;'>";
                    }

                    if (colModel[i].inputType === "checkbox" && colModel[i].allSelected) {
                        // this column has inputType and has select all checkbox.
                        headerHTML += "<input id='" + checkboxId
                        + "' onclick=\"DP_jQuery_" + dpuuid + ".table._selectHeaderCheckbox(this,'"
                        + styleClass.highlightClass + "');\" type='" + colModel[i].inputType + "'/></th>";
                    } else {
                        headerHTML += "<span id='" + checkboxId + "'>" + colModel[i].name + "</span></th>";
                    }
                }
            }

            $("#" + id + "TableHeader").html(headerHTML + "</tr></table>");
        },

        _buildBody: function (target, height) {
            var id = this._getInst(target).id,
            settings = this._getInst(target).settings;
            var subData = settings.subData,
            styleClass = $.table._getDefaults($.table._defaults, settings, "styleClass"),
            resultObj ={},
            bodyHTML = "",
            subTitleId = "",
            data = [];

            if (subData) {
                for (var i = 0; i < subData.length; i++) {
                    resultObj = this._buildTableBody(target, i);
                    subTitleId = id + "subTitle";
                    bodyHTML += "<div class='" + styleClass.subTitleClass
                    + "'><div id='" + subTitleId + i + "' class='bowknot-left " + styleClass.subTitleHideClass
                    + "'></div><div class='bowknot-left'>" + subData[i].title
                    + "</div><div class='bowknot-clear'></div></div>" + resultObj.bodyHTML;
                }
            } else {
                resultObj = this._buildTableBody(target, -1);
                bodyHTML = resultObj.bodyHTML;
            }
            data = settings.data
            $("#" + id + "TableMain").html(bodyHTML);
            var oHeight = $("#" + id + "TableMain").attr("offsetHeight");
            if (subData) {
                for (var j = 0; j < subData.length; j++) {
                    $("#" + subTitleId + j).click(function (){
                        var num = this.id.split("subTitle")[1];
                        if ($(this).hasClass(styleClass.subTitleHideClass)) {
                            $("#" + id + "subTable" + num).hide();
                            if (oHeight - $("#" + id + "subTable" + num).height() <= height) {
                                $("#" + id + "TableHeader").css("padding-right", 0);
                            }
                            this.className = "bowknot-left " + styleClass.subTitleShowClass;
                        } else {
                            $("#" + id + "subTable" + num).show();
                            if (oHeight > height) {
                                $("#" + id + "TableHeader").css("padding-right", SCROLLBAR_WIDTH - 1);
                            }
                            this.className = "bowknot-left " + styleClass.subTitleHideClass;
                        }
                    });
                }
            }
            // save default selected data at checkbox.
            if (resultObj.checkAllId !== "") {
                var invisibleDatas = $.table._getInvisibleData(settings.colModel, data, resultObj.checkedArray);
                for (var element in invisibleDatas) {
                    $("#" + resultObj.checkAllId).data(element, invisibleDatas[element]);
                }
            }
        },

        _buildTableBody: function (target, num) {
            var id = this._getInst(target).id,
            settings = this._getInst(target).settings;
            var colModel = settings.colModel,
            checkAllId = "",
            checkedArray = [],
            styleClass = $.table._getDefaults($.table._defaults, settings, "styleClass");
            var tableWidth = $.table._getTableWidth(colModel),
            bodyHTML = "<table id='" + id + "subTable" + num + "' cellpadding='0' cellspacing='0'>",
            data = [],
            currentDataNum = 0;
            data = settings.data;

            for (var currentData = 0; currentData < num; currentData++) {
                currentDataNum += settings.subData[currentData].data.length;
            }

            if (tableWidth.width === "100%") {
                bodyHTML = "<table id='" + id + "subTable" + num + "' style='width:100%;' cellpadding='0' cellspacing='0'>";
            }

            for (var i = 0; i < data.length; i++) {
                var elements = data[i],
                j = 0,
                trHTML = "",
                tdHTML = "",
                rowClass = styleClass.oddRowClass;

                if (i%2 === 1) {
                    rowClass = styleClass.evenRowClass;
                }

                // Binds style for mouseover, mouseout and click on each row.
                trHTML += '<tr class="$CLASS" '
                + ' onmouseover="DP_jQuery_' + dpuuid + '.table._mouseoverRow(this, \''
                + styleClass.lineHoverClass + '\', \'' + styleClass.highlightClass + '\');"'
                + ' onmouseout="DP_jQuery_' + dpuuid + '.table._mouseoutRow(this, \''
                + styleClass.lineHoverClass + '\');">';

                for (var tempIndex in elements) {
                    var colModelIndex = colModel[j].index;

                    for (var index in elements) {
                        if(colModelIndex === index && colModel[j].visible === undefined) {
                            var dataElement = elements[index],
                            textAlignHTML = colModel[j].textAlign ? "text-align:"
                            + colModel[j].textAlign + ";" : "";

                            if (i === 0) {    // For first row, give it width.
                                if (colModel[j].minWidth) {
                                    tdHTML += "<td style='"
                                    + "min-width:" + colModel[j].minWidth + "px;"
                                    + textAlignHTML + "'>";
                                } else {
                                    tdHTML += "<td style='"
                                    + "width:" + colModel[j].width + "px;"
                                    + textAlignHTML + "'>";
                                }
                            } else {
                                tdHTML += "<td style='" + textAlignHTML + "'>";
                            }

                            // When this column has input type, change data to HTML input element
                            // and type is for inputType.
                            // TODO: now, just suport checkbox.
                            if (colModel[j].inputType === "checkbox") {
                                var checkboxHTML = "",
                                isCheckedHTML = "",
                                isDisabledHTML = "",
                                checkId = id + "_" + index + "_" + (i + currentDataNum);
                                checkAllId = id + "_" + index;

                                if (data[i][index].value) {
                                    isCheckedHTML = "checked='checked'";
                                    trHTML = trHTML.replace("$CLASS", styleClass.highlightClass
                                        + " " + rowClass);
                                    checkedArray.push(i + currentDataNum);
                                }

                                if (data[i][index].disabled) {
                                    isDisabledHTML = "disabled='disabled'";
                                }

                                checkboxHTML = "<input id='" + checkId + "' type='"
                                + colModel[j].inputType + "' onclick=\"DP_jQuery_" + dpuuid
                                + ".table._selectCheckbox(this, '" + styleClass.highlightClass + "');\" "
                                + isCheckedHTML + " " + isDisabledHTML + "/>";
                                dataElement = checkboxHTML;
                            }

                            if (colModel[j].style) {
                                dataElement = "<div style='" + colModel[j].style + "'>" + dataElement + "</div>";
                            }

                            tdHTML += dataElement + "</td>";
                        }
                    }
                    j++;    // Counting for column.
                }
                bodyHTML += trHTML.replace("$CLASS", rowClass) + tdHTML + "</tr>";
            }

            return {
                "bodyHTML": bodyHTML + "</table>",
                "checkAllId": checkAllId,
                "checkedArray": checkedArray
            };
        },

        _getTableWidth: function (colModel) {
            var tableWidth = {
                width: 1,
                minWidth: 0
            },
            tag = false;
            for (var i = 0; i < colModel.length; i++) {
                if (colModel[i].visible !== false) {
                    if (colModel[i].minWidth) {
                        tableWidth.minWidth += colModel[i].minWidth + 1;
                        tableWidth.width = "100%";
                        tag = true;
                    } else if (colModel[i].width){
                        tableWidth.minWidth += colModel[i].width + 1;
                        if (tag) {
                            tableWidth.width = "100%";
                        } else {
                            tableWidth.width += colModel[i].width + 1;
                        }
                    }
                }
            }
            return tableWidth;
        },

        // TODO: this method judgement should be pull up, must be refactor.
        _bindEvent: function (target) {
            var inst = $.table._getInst(target);
            var id = inst.id,
            settings = inst.settings,
            colModel = inst.settings.colModel,
            data = [];

            if (settings.data) {
                data = settings.data
            } else {
                data = $.table._buildSubData(settings.subData);
            }

            for (var i = 0; i < colModel.length; i++) {
                if (colModel[i].bindEvent) {
                    for (var j = 0; j < data.length; j++) {
                        var bindElement = $($($($("#" + id + "TableMain tr")
                            .get(j)).find("td")).get(i));
                        var keys = $.table._getInvisibleData(colModel, data, [j]);
                        for (var k = 0; k < colModel[i].bindEvent.length; k++) {
                            if (colModel[i].inputType) {
                                bindElement.find("input").bind(colModel[i].bindEvent[k].eventName,
                                    keys, eval(colModel[i].bindEvent[k].functionName));
                            } else {
                                bindElement.bind(colModel[i].bindEvent[k].eventName,
                                    keys, eval(colModel[i].bindEvent[k].functionName));
                            }
                        }
                    }
                }
            }
        },

        _getInvisibleData: function (colModel, data, indexNumArray) {
            var invisibleData = {};
            for (var i = 0; i < colModel.length; i++) {
                if (colModel[i].visible === false) {
                    var keyArray = [];
                    for (var j = 0; j < indexNumArray.length; j++) {
                        keyArray.push(data[indexNumArray[j]][colModel[i].index]);
                    }
                    invisibleData[colModel[i].index] = keyArray;
                }
            }
            return invisibleData;
        },

        _mouseoverRow: function (it, lineHoverClass, highlightClass) {
            if (!$(it).hasClass(highlightClass)) {
                $(it).addClass(lineHoverClass);
            }
        },

        _mouseoutRow: function (it, lineHoverClass) {
            $(it).removeClass(lineHoverClass);
        },

        _selectHeaderCheckbox: function (it, highlightClass) {
            var arrayIt = it.id.split("_");
            var id = arrayIt[0],
            index = arrayIt[1];
            var settings = $("#" + id).data(PROP_NAME).settings;
            var data = settings.data,
            colModel = settings.colModel,
            temp = [];

            if (settings.data) {
                data = settings.data
            } else {
                data = $.table._buildSubData(settings.subData);
            }

            for (var i = 0; i < colModel.length; i ++) {
                if (colModel[i].index === index) {
                    for (var j = 0; j < data.length; j++) {
                        var checkBoxId = id + "_" + index + "_" + j;
                        var checkBox = document.getElementById(checkBoxId);
                        if (it.checked) {
                            if ((data[j][index].disabled && data[j][index].value) || !data[j][index].disabled) {
                                data[j][index].value = true;
                                $("#" + checkBoxId).attr("checked","checked");
                                temp.push(j);
                                if (checkBox.parentNode.parentNode.className.indexOf(highlightClass) < 0) {
                                    checkBox.parentNode.parentNode.className = checkBox.parentNode.parentNode.className + " " + highlightClass;
                                }
                            }
                        } else {
                            if (data[j][index].disabled && data[j][index].value) {
                                temp.push(j);
                            } else {
                                data[j][index].value = false;
                                $("#" + checkBoxId).removeAttr("checked");
                                checkBox.parentNode.parentNode.className = checkBox.parentNode.parentNode.className.replace(highlightClass, "");
                            }
                        }
                    }
                }
            }

            var invisibleDatas = $.table._getInvisibleData(settings.colModel, data, temp);
            for (var element in invisibleDatas) {
                $(it).data(element, invisibleDatas[element]);
            }
        },

        _selectCheckbox: function (it, highlightClass) {
            var keys = it.id.split("_");
            var id = keys[0],
            index = keys[1],
            order = keys[2];
            var checkboxId = id + "_" + index;
            var settings = $("#" + id).data(PROP_NAME).settings;
            var colModel = settings.colModel,
            data = [],
            className = it.parentNode.parentNode.className,
            checkedArray = [];

            if (settings.data) {
                data = settings.data
            } else {
                data = $.table._buildSubData(settings.subData);
            }

            data[order][index].value = it.checked;

            for (var i = 0; i < data.length; i++) {
                if (data[i][index].value) {
                    checkedArray.push(i);
                }
            }

            var invisibleDatas = $.table._getInvisibleData(colModel, data, checkedArray);

            for (var element in invisibleDatas) {
                $("#" + checkboxId).data(element, invisibleDatas[element]);
            }

            // style
            if (it.checked) {
                it.parentNode.parentNode.className = className + " " + highlightClass;
            } else {
                it.parentNode.parentNode.className = className.replace(highlightClass, "");
            }

            // all checked state
            if (checkedArray.length === data.length) {
                $("#" + checkboxId).attr("checked", "checked");
            } else {
                $("#" + checkboxId).removeAttr("checked");
            }

        },

        _getDefaults: function (defaults, settings, key) {
            if (key === "styleClass") {
                if (settings.theme === "default" || settings.theme === undefined) {
                    return defaults.styleClass;
                }

                settings.styleClass = {};
                for (var styleName in defaults[key]) {
                    settings.styleClass[styleName] = settings.theme + "-" + defaults.styleClass[styleName];
                }
            } else if (key === "height" || key === "width") {
                if (settings[key] === null || settings[key] === undefined) {
                    if (defaults[key] !== "auto") {
                        return defaults[key] + "px";
                    } else {
                        return defaults[key];
                    }
                } else {
                    if (settings[key] !== "auto") {
                        return settings[key] + "px";
                    }
                }
            } else {
                if (settings[key] === null || settings[key] === undefined) {
                    return defaults[key];
                }
            }
            return settings[key];
        },

        _strToInt: function (str) {
            if(!str){
                return false;
            }
            return parseInt(str.substring(0, str.length - 2));
        }
    });

    $.fn.table = function (options) {
        var otherArgs = Array.prototype.slice.call(arguments);
        return this.each(function () {
            if (options.update) {
                return $.table._updateTable(this, options.update);
            } else {
                return typeof options === "string" ?
                $.table["_" + options + "Table"].
                apply($.table, [this].concat(otherArgs)) :
                $.table._attach(this, options);
            }
        });
    };

    $.table = new Table();

    // Add another global to avoid noConflict issues with inline event handlers
    window["DP_jQuery_" + dpuuid] = $;
})(jQuery);
(function($){$.fn.extend({dialog:{version:"0.0.0.9",author:"lly219@gmail.com"}});var dpuuid=new Date().getTime();var PROP_NAME='dialog';var Dialog=function(){this._defaults={"styleClass":{"backgroundClass":"dialog-background","panelClass":"dialog-panel","contentClass":"dialog-content","closeClass":"dialog-close"},closeEvent:""},this._settingsDataFormat={height:300,widht:400}};$.extend(Dialog.prototype,{_attach:function(target,settings){if(!target.id){this.uuid++;target.id='dp'+this.uuid}var inst=this._newInst($(target));inst.settings=$.extend({},settings||{});$.data(target,PROP_NAME,inst);this._init(target)},_newInst:function(target){var id=target[0].id.replace(/([^A-Za-z0-9_])/g,'\\\\$1');return{id:id}},_getInst:function(target){try{return $.data(target,PROP_NAME)}catch(err){throw'Missing instance data for this dialog';}},_destroyBowknot:function(){},_init:function(target){var inst=this._getInst(target);var id=inst.id,settings=inst.settings;var styleClass=$.bowknot.getDefaults($.dialog._defaults,settings,"styleClass"),height=$.bowknot.getDefaults($.dialog._defaults,settings,"height"),width=$.bowknot.getDefaults($.dialog._defaults,settings,"width");var bgHTML="<div id='"+id+"BG' class='"+styleClass.backgroundClass+"'></div>",dialogHTML="<div id='"+id+"Dialog' class='"+styleClass.panelClass+"'>",closeHTML="";if(settings.closeEvent){closeHTML="<div class='"+styleClass.closeClass+"' onclick=\""+settings.closeEvent+";\"></div>"}else{closeHTML="<div class='"+styleClass.closeClass+"' onclick=\"$.dialog._close('"+id+"');\"></div>"}dialogHTML+=closeHTML+"<div class='bowknot-clear'></div><div id='"+id+"Content' class='"+styleClass.contentClass+"' style='height:"+($.bowknot.strToInt(height)-44)+"px'></div></div>";$("#"+id).wrap("<div id='"+id+"Wrap'></div>");var cloneObj=$("#"+id).clone(true);$("#"+id).remove();$('body').append(bgHTML+dialogHTML);cloneObj.prependTo("#"+id+"Content");$("#"+id).show();$("#"+id+"Dialog").show(200).css({height:height,width:width,top:(document.documentElement.clientHeight-$.bowknot.strToInt(height))/2,left:(document.documentElement.clientWidth-$.bowknot.strToInt(width))/2})},_close:function(id){$("#"+id+"BG").remove();$("#"+id).clone(true).prependTo("#"+id+"Wrap");$("#"+id).hide();$("#"+id+"Dialog").remove()},_closeDialog:function(target){$.dialog._close(target.id)}});$.fn.dialog=function(options){var otherArgs=Array.prototype.slice.call(arguments);return this.each(function(){typeof options=='string'?$.dialog['_'+options+'Dialog'].apply($.dialog,[this].concat(otherArgs)):$.dialog._attach(this,options)})};$.dialog=new Dialog();window['DP_jQuery_'+dpuuid]=$})(jQuery);
(function($){$.fn.extend({completed:{version:"0.0.0.6",author:"lly219@gmail.com"}});var j=new Date().getTime();var k='completed';var l=function(){this._defaults={"styleClass":{"panelClass":"completed-panel"},separator:","},this._settingsDataFormat={}};$.extend(l.prototype,{_attach:function(a,b){if(!a.id){this.uuid++;a.id='dp'+this.uuid}var c=this._newInst($(a));c.settings=$.extend({},b||{});$.data(a,k,c);this._init(a)},_newInst:function(a){var b=a[0].id.replace(/([^A-Za-z0-9_])/g,'\\\\$1');return{id:b}},_getInst:function(a){try{return $.data(a,k)}catch(err){throw'Missing instance data for this completed';}},_destroyCompleted:function(){},_init:function(b){var c=this._getInst(b);var d=c.id,settings=c.settings,height='';var e=$("#"+d);if(settings.height){height=settings.height+"px"}else{height="auto"}var f="<div id='"+d+"Panel' class='"+$.bowknot.getDefaults($.completed._defaults,settings,"styleClass").panelClass+"' style='height:"+height+";'></div>";settings.data.sort();e.after(f).bind("keyup",{settings:settings},this._keyupAction).click(function(a){a.target.selectionStart=settings.selectionEnd;a.target.selectionEnd=settings.selectionEnd});var g=e.val().split($.completed._defaults.separator);settings.currentName=g[g.length-1];settings.selectionEnd=e.val().length;settings.currentNum=-1;var h=$("#"+d+"Panel");h.width(e.width()-$.bowknot.strToInt(h.css("padding-top"))-$.bowknot.strToInt(h.css("padding-bottom")));e.blur(function(){h.hide()})},_getMatchData:function(a,b){var c=[];for(var i=0;i<b.length;i++){if(typeof b[i]==="number"){b[i]=b[i].toString()}if(b[i].toLowerCase().indexOf(a.toLowerCase())===0){c.push(b[i])}}return c},_removeExisted:function(a,b){for(var i=0;i<a.length;i++){for(var c in b){if(b[c]===a[i]){b.splice(c,1)}}}},_setCurrentName:function(a,b,c){var d=b.currentTarget.value;if(b.keyCode===46||b.keyCode===38||b.keyCode===40||b.keyCode===45||b.keyCode===16||b.keyCode===17||b.keyCode===18||b.keyCode===20||b.keyCode===93||b.keyCode===13){}else if(b.keyCode===35||b.keyCode===36||b.keyCode===34||b.keyCode===33||b.keyCode===37||b.keyCode===39){b.target.selectionStart=c;b.target.selectionEnd=c}else{a=d.split($.completed._defaults.separator).pop()}return a},_keyupAction:function(a){var b=a.data.settings,currentValue=this.value,id=this.id;var c=currentValue.split($.completed._defaults.separator);b.currentName=$.completed._setCurrentName(b.currentName,a,b.selectionEnd);c.pop();var d=$.completed._getMatchData(b.currentName,b.data);$.completed._removeExisted(c,d);b.selectionEnd=a.currentTarget.selectionEnd;if(d.length>0){if(a.keyCode===38||a.keyCode===40){if(a.keyCode===38){if(b.currentNum>-1){b.currentNum--}}else{if(b.currentNum<d.length-1){b.currentNum++}}if(b.currentNum>-1){if(c.length===0){this.value=d[b.currentNum]}else{this.value=c.toString()+$.completed._defaults.separator+d[b.currentNum]}}}else if(a.keyCode===13){b.currentNum=-1;$.completed._enterAction(id,b,a.currentTarget.selectionEnd);return}$.completed._buildPanel(id,d,b.currentNum)}else{b.currentNum=-1;$("#"+id+"Panel").hide()}$("#tip").text(b.currentName)},_enterAction:function(a,b,c){b.currentName="";b.currentNum=-1;b.selectionEnd=c+1;var d=$("#"+a).val();if(d.charAt(d.length-1)!==$.completed._defaults.separator){$("#"+a).val($("#"+a).val()+$.completed._defaults.separator)}$("#"+a+"Panel").hide()},_buildPanel:function(a,b,c){var d=$("#"+a+"Panel");var e="";for(var i=0;i<b.length;i++){if(c===i){e+="<div class='selected'>"+b[i]+"</div>"}else{e+="<div>"+b[i]+"</div>"}}d.html(e).show();var f=$("#"+a+"Panel div.selected");if(f.length>0){if(f.position().top+d.scrollTop()>50-f.height()){d.scrollTop(f.position().top+d.scrollTop()+f.height()-50)}if(f.position().top<0){d.scrollTop(d.scrollTop-f.height())}}}});$.fn.completed=function(a){var b=Array.prototype.slice.call(arguments);return this.each(function(){typeof a=='string'?$.completed['_'+a+'Completed'].apply($.completed,[this].concat(b)):$.completed._attach(this,a)})};$.completed=new l();window['DP_jQuery_'+j]=$})(jQuery);