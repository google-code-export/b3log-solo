/*
 * Copyright (C) 2010, Liyuan Li
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
(function ($) {
    var Bowknot = function () {

    };

    $.extend(Bowknot.prototype, {
        _info: {
            version:"0.0.0.7",
            author: "lly219@gmail.com"
        },

        getDefaults: function (defaults, settings, key) {
            if (key === "styleClass") {
                if (settings.theme === "default" || settings.theme === undefined) {
                    return defaults.styleClass;
                }

                settings.styleClass = {};
                for (var styleName in defaults[key]) {
                    settings.styleClass[styleName] = settings.theme + "-" + defaults.styleClass[styleName];
                }
            } else if ((key === "height" && settings[key] !== "auto") || key === "width") {
                if (settings[key] === null || settings[key] === undefined) {
                    return defaults[key] + "px";
                } else {
                    return settings[key] + "px";
                }
            } else {
                if (settings[key] === null || settings[key] === undefined) {
                    return defaults[key];
                }
            }
            return settings[key];
        },

        strToInt: function (str) {
            return parseInt(str.substring(0, str.length - 2));
        },

        getDate: function(time, type) {
            var date = new Date(time);
            var year = date.getFullYear(),
            month = date.getMonth() + 1,
            day = date.getDate(),
            hours = date.getHours(),
            seconds = date.getSeconds(),
            minutes = date.getMinutes();

            if (month < 10) {
                month = "0" + month.toString();
            }

            if (day < 10) {
                day = "0" + day.toString();
            }

            if (hours < 10) {
                hours = "0" + hours.toString();
            }

            if (minutes < 10) {
                minutes = "0" + minutes.toString();
            }

            if (seconds < 10) {
                seconds = "0" + seconds.toString();
            }

            switch (type) {
                case undefined: // yyyy-MM-dd
                    return year + "-" + month + "-" + day;
                    break;
                case 1: // yyyy-MM-dd HH:mm:ss
                    return year + "-" + month + "-" + day + " " + hours + ":" + minutes + ":" + seconds;
                    break;
                default:
                    return false;
                    break;
            }
        },

        ellipsis: function (str, strLength) {
            var length = 0,
            strTrim = str.replace(/(^\s*)|(\s*$)/g, ""),
            strArray = strTrim.split(""),
            resultStr = "";
            for (var i = 0; i < strArray.length; i++) {
                if (length < strLength) {
                    if(strArray[i]&& strArray[i].match(/[^u4E00-u9FA5]/)) {
                        length += 2;
                    } else {
                        length++;
                    }
                    resultStr += strArray[i];
                }
            }
            if (strTrim !== resultStr) {
                resultStr += "...";
            }
            return resultStr;
        }
    });

    $.bowknot = new Bowknot();
})(jQuery);

/*
     * Copyright (C) 2009, 2010, Liyuan Li
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

(function ($) {
    $.fn.extend({
        paginate: {
            version: "0.0.0.8",
            author: "lly219@gmail.com"
        }
    });

    var dpuuid = new Date().getTime();
    var PROP_NAME = "paginate";

    var Paginate = function () {
        this._defaults = {
            "styleClass": {
                "prePageClass": "pagination-prePage",
                "nextPageClass": "pagination-nextPage",
                "prePageHoverClass": "pagination-prePageHover",
                "nextPageHoverClass": "pagination-nextPageHover",
                "goInputClass": "pagination-goInput",
                "submitClass": "pagination-submit",
                "pageClass": "pagination-page",
                "pageHoverClass": "pagination-pageHover",
                "pageCurrentClass": "pagination-pageCurrent",
                "paginationClass": "pagination-pagination",
                "clearClass": "pagination-clear"
            },
            "pageCount": 1,
            "currentPage": 1,
            "windowSize": 5,
            "bindEvent": "",
            "isGoTo": true,
            "isPageCount": true,
            // default and black
            "theme": "default",
            "errorMessage": undefined,
            // taobao and google
            "style": "taobao"
        }
    };

    $.extend(Paginate.prototype, {
        _attach: function (target, settings) {
            if (!target.id) {
                this.uuid++;
                target.id = "dp" + this.uuid;
            }
            var inst = this._newInst($(target));

            inst.settings = $.extend({}, settings || {});
            $.data(target, PROP_NAME, inst);

            this._init(target);
        },

        /* Create a new instance object. */
        _newInst: function (target) {
            // escape jQuery meta chars
            var id = target[0].id.replace(/([^A-Za-z0-9_])/g, "\\\\$1");
            return {
                id: id
            };
        },

        _getInst: function (target) {
            try {
                return $.data(target, PROP_NAME);
            } catch (err) {
                throw "Missing instance data for this pagination";
            }
        },

        _destroyPagination: function () {

        },

        _updatePagination: function (target, updateSettings) {
            var inst = this._getInst(target),
            settings = inst.settings;

            for (var element in updateSettings) {
                if (typeof(updateSettings[element]) === "string" || element === "data"
                    || typeof(updateSettings[element]) === "number") {
                    settings[element] = updateSettings[element];
                } else {
                    settings[element] = $.extend(settings[element], updateSettings[element]);
                }
            }

            $.paginate._build(target);
        },

        _init: function (target) {
            var inst = this._getInst(target);
            var id = inst.id,
            settings = inst.settings;

            $("#" + id).append("<div id='" + id + "Pagination' class='"
                +  $.bowknot.getDefaults($.paginate._defaults, settings, "styleClass").paginationClass
                + "'></div>");

            this._build(target);
        },

        _build: function (target) {
            var inst = this._getInst(target);
            var id = inst.id,
            settings = inst.settings;
            var currentPage = $.bowknot.getDefaults($.paginate._defaults, settings, "currentPage"),
            pageCount = settings.pageCount,
            pages = [],
            bindEvent = settings.bindEvent,
            styleClass = $.bowknot.getDefaults($.paginate._defaults, settings, "styleClass");
            var paginationHTML = "",
            pageCountHTML = "",
            goToPageHTML = "",
            windowSize = $.bowknot.getDefaults($.paginate._defaults, settings, "windowSize"),
            style = $.bowknot.getDefaults($.paginate._defaults, settings, "style");

            if ($.bowknot.getDefaults($.paginate._defaults, settings, "isGoTo")) {
                goToPageHTML = "到<input class='" + styleClass.goInputClass + "' id='" + id
                + "PaginationInput'/>页<button class='" + styleClass.submitClass + "' id='"
                + id + "PaginationSubmit'>确定</button>";
            }

            if ($.bowknot.getDefaults($.paginate._defaults, settings, "isPageCount")) {
                pageCountHTML = currentPage + "/" + pageCount;
            }

            switch (style) {
                case "taobao":
                    pages = this._getTaobaoPages(currentPage, pageCount);
                    break;
                case "google":
                    pages = this._getGooglePages(currentPage, pageCount, windowSize);
                    break;
                default:
                    alert("has no style!");
                    break;
            }

            // build pagination style.
            for (var i = 0; i < pages.length; i++) {
                var  paginationClass = " class='" + styleClass.pageClass + "'",
                currPageNumber = 0,
                currDisplayPageNumber = 0;
                if (pages[i] === currentPage) {
                    paginationClass = " class='" + styleClass.pageCurrentClass + "'";
                }

                if (typeof(pages[i]) === "number") {
                    currPageNumber = currDisplayPageNumber = pages[i];
                } else {
                    var currPage = pages[i].split("&");
                    currPageNumber = parseInt(currPage[0]);
                    currDisplayPageNumber = currPage[1];

                    if (currDisplayPageNumber === ">") {
                        paginationClass = " class='" + styleClass.nextPageClass + "'";
                    }

                    if (currDisplayPageNumber === "<") {
                        paginationClass = " class='" + styleClass.prePageClass + "'";
                    }
                }

                paginationHTML += "<span title='" + currPageNumber + "' onclick=\"$.paginate._changePages('"
                + id + "', '" + currPageNumber + "');" + bindEvent
                + "(" + currPageNumber + ")\"" + paginationClass + ">" + currDisplayPageNumber + "</span>";
            }

            // first and last page for google style
            if (style === "google") {
                if (pages[0] !== 1) {
                    paginationHTML = "<span title='" + 1 + "' onclick=\"$.paginate._changePages('"
                    + id + "', '1');" + bindEvent
                    + "(1)\"" + paginationClass + "><<</span>" + paginationHTML;
                }
                if (pages[pages.length - 1] !== pageCount) {
                    paginationHTML += "<span title='" + pageCount + "' onclick=\"$.paginate._changePages('"
                    + id + "', '" + pageCount + "');" + bindEvent
                    + "(" + pageCount + ")\"" + paginationClass + ">>></span>";
                }
            }

            $("#" + id + "Pagination").html(paginationHTML + pageCountHTML + goToPageHTML
                + "<div class='" + styleClass.clearClass + "'></div>");

            // mouseover, mouseout action for page number.
            $("#" + id + "Pagination span").mouseover(function () {
                if ($(this).hasClass(styleClass.prePageClass)) {
                    this.className = styleClass.prePageHoverClass;
                } else if ($(this).hasClass(styleClass.nextPageClass)) {
                    this.className = styleClass.nextPageHoverClass;
                } else {
                    $(this).addClass(styleClass.pageHoverClass);
                }
            }).mouseout(function () {
                if ($(this).hasClass(styleClass.prePageHoverClass)) {
                    this.className = styleClass.prePageClass;
                } else if ($(this).hasClass(styleClass.nextPageHoverClass)) {
                    this.className = styleClass.nextPageClass;
                } else {
                    $(this).removeClass(styleClass.pageHoverClass);
                }
            });

            // enter action for page input.
            $("#" + id + "PaginationInput").bind("keypress", {
                target: target
            }, $.paginate._goToPage).focus();

            // submit page action.
            $("#" + id + "PaginationSubmit").bind("click", {
                target: target
            }, $.paginate._goToPage);
        },

        _changePages: function (id, currentPage) {
            var target = id;

            if (typeof(id) === "string") {
                target = $("#" + id)[0];
            }

            var settings = $("#" + id).data(PROP_NAME).settings;

            settings.currentPage = this.title ? parseInt(this.title) : parseInt(currentPage);

            $.paginate._build(target);
        },

        _goToPage: function (event) {
            var target = event.data.target;
            var inst = $.paginate._getInst(target);
            var id = inst.id,
            settings = inst.settings;
            var currentPage = parseInt($("#" + id + "PaginationInput").val());

            if (this.id.search(/PaginationInput/) !== -1 && event.keyCode !== 13) {
                return;
            }

            settings.currentPage =  parseInt($("#" + id + "PaginationInput").val());

            if (currentPage > 0 && currentPage <= settings.pageCount) {
                eval(settings.bindEvent + "(" + currentPage + ");");
                $.paginate._changePages(id, currentPage);
            } else if (settings.errorMessage) {
                alert(settings.errorMessage);
                $("#" + id + "PaginationInput").val("");
            }
        },

        _getGooglePages: function (currentPage, pageCount, windowSize) {
            var ret = [];
            if (pageCount < windowSize) {
                for (var i = 0; i < pageCount; i++) {
                    ret.push(i + 1);
                }
            } else {
                var first = currentPage - parseInt(windowSize / 2);
                first = first < 1 ? 1 : first;
                first = first + windowSize > pageCount ? pageCount - windowSize + 1
                : first;
                for (var j = 0; j < windowSize; j++) {
                    ret.push(first + j);
                }
            }

            return ret;
        },

        _getTaobaoPages: function (currentPage, pageCount) {
            var pagination = [],
            i = 2,
            len = 4,
            begin = 3,
            end = 0,
            maxEnd = 0,
            pre = 0

            if (currentPage >= len) {
                begin = currentPage - Math.ceil(len/2);
                maxEnd = currentPage + Math.ceil(len/2) + 1;
                if (maxEnd < pageCount) {
                    end = maxEnd;
                } else {
                    end = pageCount;
                }
            } else if (currentPage < len) {
                maxEnd = currentPage + Math.ceil(len/2) + 1;
                if (maxEnd < pageCount) {
                    end = maxEnd;
                } else {
                    end = pageCount;
                }
            }

            if (begin < 3) {
                begin = 3;
            }

            for (i = begin; i <= end; i++) {
                pagination.push(i);
            }

            if (begin > 3) {
                pre = 2 + (begin -2);
                pagination.unshift(pre + "&...");
            }

            if (pageCount < 2) {
                i = (currentPage === 0) ? 0 : 1;
            } else {
                i = 2;
            }

            for (; i >= 1; i = i-1) {
                pagination.unshift(i);
            }

            if (end < pageCount) {
                pre = end + Math.ceil(len/2);
                if (pre > pageCount) {
                    pre = pageCount;
                }
                pagination.push(pre + "&...");
            }

            if (currentPage > 1) {
                pagination.splice(0, 0, (currentPage - 1) + "&<");
            }

            if (currentPage < pageCount) {
                pagination.push((currentPage + 1) + "&>");
            }

            return pagination;
        }
    });

    $.fn.paginate = function (options) {
        var otherArgs = Array.prototype.slice.call(arguments);
        return this.each(function () {
            if (options.update) {
                $.paginate._updatePagination(this, options.update);
            } else {
                typeof options === "string" ?
                $.paginate["_" + options + "Pagination"].
                apply($.paginate, [this].concat(otherArgs)) :
                $.paginate._attach(this, options);
            }
        });
    };

    $.paginate = new Paginate();

    // Add another global to avoid noConflict issues with inline event handlers
    window["DP_jQuery_" + dpuuid] = $;
})(jQuery);

/*
     * Copyright (C) 2010, Liyuan Li
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
// Version: 0.0.6.7: appendData
// Version: 0.0.6.7: checkbox all select bug
// Version: 0.0.6.9: checkbox can set the value of disabled
(function ($) {
    $.fn.extend({
        table: {
            version: "0.0.6.9",
            author: "lly219@gmail.com"
        }
    });

    var dpuuid = new Date().getTime();
    var PROP_NAME = "table",
    SCROLLBAR_WIDTH = 17;

    // Table value.
    var Table = function () {
        // If these attributes undefined in new, should be use those default value.
        this._defaults = {
            "height": "auto",
            // TODO: can not support, default value is ture.
            "resizable": false,
            // TODO: no implement.
            "caption": "Table mock data",
            // At one document, need two or more table style, should defined
            // this attribute, reference this._default.styleClass.
            // At one document, just use one style and plan change style,
            // please use switchStylestyle() this method, cann't defined
            // this attribute.
            "styleClass": {
                "highlightClass": "table-heiglight",
                "mainClass": "table-main",
                "bodyClass": "table-body",
                "headerClass": "table-header",
                "verticalLineClass": "table-verticalLine",
                "lineHoverClass": "table-lineHover",
                "sortClass": "table-sort",
                "sortASCClass": "table-sortASC",
                "sortDESCClass": "table-sortDESC",
                "sortUnASCClass": "table-sortUnactiveASC",
                "sortUnDESCClass": "table-sortUnactiveDESC",
                "floatLayerIconClass": "table-floatLayerIcon",
                "oddRowClass": "table-oddRow",
                "evenRowClass": "table-evenRow"
            },
            // default value is default, can use black.
            theme: "default",
            bindColumnEvent: [{
                "eventName": "",
                "functionName": ""
            }],
            // for resize
            currentIndex: ""
        },

        this._settingsDataFormat = {
            // The key should be same as model[i].index.
            "data": [],
            // TODO: now, the order should be same as data.
            "colModel": [{
                name: "",    // every column title
                index: "",    // every column uid
                width: 90,
                // resizable, at less one column cann't defiend width, so use minWidth.
                minWidth: 50,
                // can use center, left and right, default is left.
                textAlign: "left",
                // Note: if has this attribute, do not use inputType.
                sortType: "string",
                // first arg: event, e.g: mouseover, click...
                // second arg: function name.
                // can bind one or more event.
                bindEvent:[{
                    "evenName": "",
                    "funcitonName": ""
                }],
                // Bind this column. When mouseover,
                // the tag of id should be show in position of td tag that mouse point,
                // when mouseout, the tag of id should be hidden.
                // Of course, when mouse at the tag of id, it should be show.
                // If needs bind event and want to use hiddenData, can use
                // $("#" + id).data(id) get hiddenData.
                floatLayer: "id",
                // All row in this column should display this type input tag.
                // Type include button, checkbox, file, image, password, radio, text.
                // If needs bind event and want to use hiddenData, can use $("#"
                // + id + "_" + /* this column index */).data(id)
                // get hiddenData.
                // Note: 1. when typs is checkbox, data just can use false or true.
                //       2. if has this attribute, do not use sortType
                // TODO: now just support checkbox.
                inputType: "",
                // If inputType is "checkbox" and you need select all function,
                // set it ture.
                allSelected: false,
                visible: true,
                style: "",
                sortEvent: ""
            }]
        }
    };

    $.extend(Table.prototype, {
        _attach: function (target, settings) {
            if (!target.id) {
                this.uuid++;
                target.id = "dp" + this.uuid;
            }
            var inst = this._newInst($(target));

            inst.settings = $.extend({}, settings || {});
            $.data(target, PROP_NAME, inst);
            this._init(target);
        },

        /* Create a new instance object. */
        _newInst: function (target) {
            // escape jQuery meta chars
            var id = target[0].id.replace(/([^A-Za-z0-9_])/g, "\\\\$1");
            return {
                id: id
            };
        },

        _getInst: function (target) {
            try {
                return $.data(target, PROP_NAME);
            } catch (err) {
                throw "Missing instance data for this table";
            }
        },

        _destroyTable: function () {

        },

        _updateTable: function (target, updateSettings) {
            var inst = this._getInst(target),
            settings = inst.settings;

            for (var element in updateSettings) {
                if (typeof(updateSettings[element]) === "string" || typeof(updateSettings[element]) === "number"
                    || element === "data") {
                    settings[element] = updateSettings[element];
                } else {
                    settings[element] = $.extend(settings[element], updateSettings[element]);
                }
            }

            this._build(target);
        },

        _appendDataTable: function (target, data) {
            var inst = this._getInst(target),
            settings = inst.settings;
            for (var i = 0; i < data.length; i++) {
                settings.data.push(data[i]);
            }
            this._build(target);
        },

        _init: function (target) {
            var inst = this._getInst(target),
            settings = inst.settings;

            $(target).append("<div class='" + $.bowknot.getDefaults($.table._defaults, settings, "styleClass").mainClass
                + "' id='" + inst.id + "Table'></div>");

            this._build(target);
        },

        _build: function (target) {
            var inst = this._getInst(target),
            settings = inst.settings;

            var resizable = $.bowknot.getDefaults($.table._defaults, settings, "resizable"),
            styleClass = $.bowknot.getDefaults($.table._defaults, settings, "styleClass"),
            height = $.bowknot.getDefaults($.table._defaults, settings,"height"),
            tableWidth = this._getTableWidth(settings.colModel);

            var verticalLineHTML = resizable ? "<div class='"
            + styleClass.verticalLineClass + "' id='"
            + inst.id + "VerticalLine'></div>" : "";

            var tableHTML = verticalLineHTML + "<div id='"
            + inst.id + "TableHeader' class='" + styleClass.headerClass
            + "'></div>" + "<div id='" + inst.id + "TableMain' style='height:"
            + height + ";' class='" + styleClass.bodyClass
            + "'></div>";

            $("#" + inst.id + "Table").html(tableHTML).css("position", "relative");

            this._buildHeader(target);
            if (settings.data) {
                this._buildBody(target);
                this._bindEvent(target);
                this._bindRowEvent(target);
            // TODO: copy to stor method
            }

            // when has scrollbar

            if (tableWidth.width === "100%") {
                if ($("#" + inst.id + "TableMain").attr("scrollHeight")
                    !== $("#" + inst.id + "TableMain").attr("clientHeight")) {
                    $("#" + inst.id + "TableHeader").css("padding-right", SCROLLBAR_WIDTH - 1);
                }
            } else {
                if ($("#" + inst.id + "TableMain").attr("scrollHeight")
                    !== $("#" + inst.id + "TableMain").attr("clientHeight")) {
                    document.getElementById(inst.id + "TableMain").style.width = (tableWidth.width + SCROLLBAR_WIDTH) + "px";
                    document.getElementById(inst.id + "TableHeader").style.width = tableWidth.width + "px";
                } else {
                    document.getElementById(inst.id + "TableMain").style.width = tableWidth.width + "px";
                    document.getElementById(inst.id + "TableHeader").style.width = tableWidth.width + "px";
                }
            }

            // resizable
            if (resizable && tableWidth.width !== "100%") {
                $("#" + inst.id + "VerticalLine").height($("#" + inst.id + "TableHeader").height()
                    + (settings.height ? settings.height: $("#" + inst.id + "TableMain").height()));

                $("#" + inst.id + "Table").bind("mousemove", {
                    "target": target
                }, this._mousemoveTabel).bind("mousedown", {
                    "target":target
                }, this._mousedownVerticalLine);
            }
        },

        _buildHeader: function (target) {
            var settings = this._getInst(target).settings;
            var colModel = settings.colModel,
            id = this._getInst(target).id,
            styleClass = $.bowknot.getDefaults($.table._defaults, settings, "styleClass"),
            tableWidth = this._getTableWidth(colModel),
            headerHTML = "";

            var sortHTML = '<div class="' + styleClass.sortASCClass + ' '
            + styleClass.sortUnASCClass + '">' + '</div><div class="'
            + styleClass.sortDESCClass + ' ' + styleClass.sortUnDESCClass + '"></div>';

            if (tableWidth.width === "100%") {
                headerHTML = "<table cellpadding='0' cellspacing='0' style='min-width:"
                + tableWidth.minWidth + "px;width:100%'><tr>"
            } else {
                headerHTML = "<table cellpadding='0' cellspacing='0'><tr>"
            }

            for (var i = 0; i < colModel.length; i++) {
                if (colModel[i].visible === undefined) {
                    var checkboxId = id + "_" + colModel[i].index;
                    if (colModel[i].minWidth) {
                        headerHTML += "<th style='min-width:" + colModel[i].minWidth + "px;'>";
                    } else {
                        headerHTML += "<th style='width:" + colModel[i].width + "px;'>";
                    }

                    if (colModel[i].sortType || colModel[i].sortEvent) {
                        // this cloumn needs sort
                        headerHTML += "<span id='" + checkboxId + "'>" + colModel[i].name
                        + '</span><span class="' + styleClass.sortClass
                        + '" id="' + checkboxId + 'TableSort">'
                        + sortHTML + "</span></th>";
                    } else if (colModel[i].inputType === "checkbox" && colModel[i].allSelected) {
                        // this column has inputType and has select all checkbox.
                        headerHTML += "<input id='" + checkboxId
                        + "' onclick=\"DP_jQuery_" + dpuuid + ".table._selectHeaderCheckbox(this,'"
                        + styleClass.highlightClass + "');\" type='" + colModel[i].inputType + "'/></th>";
                    } else {
                        headerHTML += "<span id='" + checkboxId + "'>" + colModel[i].name + "</span></th>";
                    }
                }
            }

            $("#" + id + "TableHeader").html(headerHTML + "</tr></table>");

            // bind sort event
            for (var j = 0; j < colModel.length; j++) {
                if (colModel[j].sortType || colModel[j].sortEvent) {
                    $("#" + id + "_" + colModel[j].index + "TableSort").bind("click", {
                        "index": colModel[j].index,
                        "target": target
                    },$.table._sort);
                }
            }
        },

        _buildBody: function (target) {
            var bodyHTML = "",
            id = this._getInst(target).id,
            settings = this._getInst(target).settings;
            var data = settings.data,
            colModel = settings.colModel;
            var styleClass = $.bowknot.getDefaults($.table._defaults, settings, "styleClass"),
            tableWidth = $.table._getTableWidth(colModel),
            checkAllId = "",
            checkedArray = [];

            if (tableWidth.width === "100%") {
                bodyHTML = "<table style='width:100%;min-width:"
                + tableWidth.minWidth +"px;' cellpadding='0' cellspacing='0'>";
            } else {
                bodyHTML = "<table cellpadding='0' cellspacing='0'>"
            }

            for (var i = 0; i < data.length; i++) {
                var elements = data[i],
                j = 0,
                trHTML = "",
                tdHTML = "",
                rowClass = styleClass.oddRowClass;

                if (i%2 === 1) {
                    rowClass = styleClass.evenRowClass;
                }

                // Binds style for mouseover, mouseout and click on each row.
                trHTML += '<tr class="$CLASS" '
                + ' onmouseover="DP_jQuery_' + dpuuid + '.table._mouseoverRow(this, \''
                + styleClass.lineHoverClass + '\', \'' + styleClass.highlightClass + '\');"'
                + ' onmouseout="DP_jQuery_' + dpuuid + '.table._mouseoutRow(this, \''
                + styleClass.lineHoverClass + '\');">';

                for (var tempIndex in elements) {
                    var colModelIndex = colModel[j].index;

                    for (var index in elements) {
                        if(colModelIndex === index && colModel[j].visible === undefined) {
                            var dataElement = elements[index],
                            textAlignHTML = colModel[j].textAlign ? "text-align:"
                            + colModel[j].textAlign + ";" : "";

                            if (i === 0) {    // For first row, give it width.
                                if (colModel[j].minWidth) {
                                    tdHTML += "<td style='"
                                    + "min-width:" + colModel[j].minWidth + "px;"
                                    + textAlignHTML + "'>";
                                } else {
                                    tdHTML += "<td style='"
                                    + "width:" + colModel[j].width + "px;"
                                    + textAlignHTML + "'>";
                                }
                            } else {
                                tdHTML += "<td style='" + textAlignHTML + "'>";
                            }

                            // When this column has input type, change data to HTML input element
                            // and type is for inputType.
                            // TODO: now, just suport checkbox.
                            if (colModel[j].inputType === "checkbox") {
                                var checkboxHTML = "",
                                isCheckedHTML = "",
                                isDisabledHTML = "",
                                checkId = id + "_" + index + "_" + i;
                                checkAllId = id + "_" + index;

                                if (data[i][index].value) {
                                    isCheckedHTML = "checked='checked'";
                                    trHTML = trHTML.replace("$CLASS", styleClass.highlightClass
                                        + " " + rowClass);
                                    checkedArray.push(i);
                                }

                                if (data[i][index].disabled) {
                                    isDisabledHTML = "disabled='disabled'";
                                }

                                checkboxHTML = "<input id='" + checkId + "' type='"
                                + colModel[j].inputType + "' onclick=\"DP_jQuery_" + dpuuid
                                + ".table._selectCheckbox(this, '" + styleClass.highlightClass + "');\" "
                                + isCheckedHTML + " " + isDisabledHTML + "/>";
                                dataElement = checkboxHTML;
                            }


                            // When this column has float layer, add this icon to trigger event.
                            if (colModel[j].floatLayer) {
                                var floatLayerIconHTML = "";

                                // TODO: id exposed, very unsafe.
                                floatLayerIconHTML = "<div class='" + styleClass.floatLayerIconClass + "'"
                                + ' onmouseover="DP_jQuery_' + dpuuid + '.table._show(this, \''
                                + colModel[j].floatLayer + '\', \'' + id + '\',\'' + i + '\');" '
                                + ' onmouseout="DP_jQuery_' + dpuuid + '.table._hide(\''
                                + colModel[j].floatLayer + '\');"></div>';

                                dataElement = floatLayerIconHTML + dataElement;

                                $("#" + colModel[j].floatLayer + "Table").mouseover(function () {
                                    $(this).show();
                                }).mouseout(function () {
                                    $(this).hide();
                                });

                                if (i === 0) {
                                    var element = document.getElementById(colModel[j].floatLayer);

                                    var floatLayerHTML = '<' + element.tagName + " class='"
                                    + element.className + "' id='" + colModel[j].floatLayer
                                    + "Table'>" + $("#" + colModel[j].floatLayer).html()
                                    + "</" + element.tagName + ">";

                                    $("#" + id + "Table").append(floatLayerHTML);
                                }
                            }

                            if (colModel[j].style) {
                                dataElement = "<div style='" + colModel[j].style + "'>" + dataElement + "</div>";
                            }

                            tdHTML += dataElement + "</td>";
                        }
                    }
                    j++;    // Counting for column.
                }
                bodyHTML += trHTML.replace("$CLASS", rowClass) + tdHTML + "</tr>";
            }

            $("#" + id + "TableMain").html(bodyHTML + "</table>");

            // save default selected data at checkbox.
            if (checkAllId !== "") {
                var invisibleDatas = $.table._getInvisibleData(settings.colModel, data, checkedArray);
                for (var element in invisibleDatas) {
                    $("#" + checkAllId).data(element, invisibleDatas[element]);
                }
            }
        },

        _getTableWidth: function (colModel) {
            var tableWidth = {
                width: 1,
                minWidth: 0
            },
            tag = false;
            for (var i = 0; i < colModel.length; i++) {
                if (colModel[i].minWidth) {
                    tableWidth.minWidth += colModel[i].minWidth + 1;
                    tableWidth.width = "100%";
                    tag = true;
                } else {
                    tableWidth.minWidth += colModel[i].width + 1;
                    if (tag) {
                        tableWidth.width = "100%";
                    } else {
                        tableWidth.width += colModel[i].width + 1;
                    }
                }
            }
            return tableWidth;
        },

        // TODO: this method judgement should be pull up, must be refactor.
        _bindEvent: function (target) {
            var inst = $.table._getInst(target);
            var id = inst.id,
            data = inst.settings.data,
            colModel = inst.settings.colModel;
            for (var i = 0; i < colModel.length; i++) {
                if (colModel[i].bindEvent) {
                    for (var j = 0; j < data.length; j++) {
                        var bindElement = $($($($("#" + id + "TableMain tr")
                            .get(j)).find("td")).get(i));
                        var keys = $.table._getInvisibleData(colModel, data, [j]);
                        for (var k = 0; k < colModel[i].bindEvent.length; k++) {
                            bindElement.bind(colModel[i].bindEvent[k].eventName,
                                keys, eval(colModel[i].bindEvent[k].functionName));
                        }
                    }
                }
            }
        },

        _bindRowEvent: function (target) {
            var inst = $.table._getInst(target);
            var bindRowEvent = inst.settings.bindRowEvent;
            if (bindRowEvent) {
                var id = inst.id,
                colModel = inst.settings.colModel,
                data = inst.settings.data;
                for (var i = 0; i < data.length; i++) {
                    var bindElement = $($("#" + id + "TableMain tr").get(i));
                    var keys = $.table._getInvisibleData(colModel, data, [i]);
                    for (var j = 0; j < bindRowEvent.length; j++) {
                        bindElement.bind(bindRowEvent[j].eventName, keys, eval(bindRowEvent[j].functionName));
                    }
                }
            }
        },

        _getInvisibleData: function (colModel, data, indexNumArray) {
            var invisibleData = {};
            for (var i = 0; i < colModel.length; i++) {
                if (colModel[i].visible === false) {
                    var keyArray = [];
                    for (var j = 0; j < indexNumArray.length; j++) {
                        keyArray.push(data[indexNumArray[j]][colModel[i].index]);
                    }
                    invisibleData[colModel[i].index] = keyArray;
                }
            }
            return invisibleData;
        },

        // TODO: Unuse, should be remove.
        _selectRow: function (it, id, highlightClass) {
        //$("#" + id + "TableMain tr").removeClass(highlightClass);
        //$(it).addClass(highlightClass);
        },

        _mouseoverRow: function (it, lineHoverClass, highlightClass) {
            if (!$(it).hasClass(highlightClass)) {
                $(it).addClass(lineHoverClass);
            }
        },

        _mouseoutRow: function (it, lineHoverClass) {
            $(it).removeClass(lineHoverClass);
        },

        _sort: function (event) {
            var index = event.data.index,
            target = event.data.target;
            var settings = $.table._getInst(target).settings,
            id = this.id.split("_")[0];
            var data = settings.data,
            colModel = settings.colModel,
            styleClass = $.bowknot.getDefaults($.table._defaults, settings, "styleClass");
            var  sortType = "",
            divs = "#" + this.id + " .",
            currentColModel = undefined;

            // sort style
            for (var p = 0; p < colModel.length; p++) {
                if (colModel[p].index === index) {
                    sortType = colModel[p].sortType;
                    currentColModel = colModel[p];
                }else {
                    $("#" + id + "_" + colModel[p].index + "TableSort ." + styleClass.sortASCClass).addClass(styleClass.sortUnASCClass);
                    $("#" + id + "_" + colModel[p].index + "TableSort ." + styleClass.sortDESCClass).addClass(styleClass.sortUnDESCClass);
                }
            }

            if (($(divs + styleClass.sortASCClass).hasClass(styleClass.sortUnASCClass)
                &&  $(divs + styleClass.sortDESCClass).hasClass(styleClass.sortUnDESCClass))
            || ($(divs + styleClass.sortASCClass).hasClass(styleClass.sortUnASCClass)
                && !$(divs + styleClass.sortDESCClass).hasClass(styleClass.sortUnDESCClass))) {
                if (currentColModel.sortEvent) {
                    eval(currentColModel.sortEvent)("ASC");
                } else {
                    for (var i = 1; i <= data.length; i++) {
                        for (var j = 0; j < data.length - i; j++) {
                            var temp = data[j],
                            tempIndex = $.table._getsortType(temp[index], sortType),
                            dataIndex = $.table._getsortType(data[j + 1][index], sortType);
                            if (tempIndex > dataIndex) {
                                data[j] = data[j + 1];
                                data[j + 1] = temp;
                            }
                        }
                    }
                }
                $(divs + styleClass.sortASCClass).removeClass(styleClass.sortUnASCClass);
                $(divs + styleClass.sortDESCClass).addClass(styleClass.sortUnDESCClass);
            } else {
                if (currentColModel.sortEvent) {
                    eval(currentColModel.sortEvent)("DESC");
                } else {
                    for (var k = 1; k <= data.length; k++) {
                        for (var l = 0; l < data.length - k; l++) {
                            var tempAsc = data[l],
                            tempIndexAsc = $.table._getsortType(tempAsc[index], sortType),
                            dataIndexAsc = $.table._getsortType(data[l + 1][index], sortType);

                            if (tempIndexAsc < dataIndexAsc) {
                                data[l] = data[l + 1];
                                data[l + 1] = tempAsc;
                            }
                        }
                    }
                }

                $(divs + styleClass.sortASCClass).addClass(styleClass.sortUnASCClass);
                $(divs + styleClass.sortDESCClass).removeClass(styleClass.sortUnDESCClass);
            }

            if (settings.data && !currentColModel.sortEvent) {
                $.table._buildBody(target);
                $.table._bindEvent(target);
                $.table._bindRowEvent(target);
            }
        },

        _getsortType: function (src, sortType) {
            if (sortType === "int") {
                return parseInt(src);
            } else if (sortType === "float") {
                return parseFloat(src);
            }
            return src;
        },

        _mousemoveTabel: function (event) {
            if (window.attachEvent) {
                event.preventDefault(); // to prevent highlighting text in table cells
            }

            var target = event.data.target;
            var inst = $.table._getInst(target);
            var id = inst.id,
            colModel = inst.settings.colModel;
            var positionX = event.clientX - document.getElementById(id).offsetLeft - $.table._getPadding(id) + $("#" + id + "Table").scrollLeft(),
            isAtColumnSide = $.table._isAtColumnSide(positionX, target),
            i = 0,
            minWidth = 0;

            $("#" + id + "VerticalLine").css("left", positionX);

            for (; i < colModel.length; i++) {
                if ($.table._defaults.currentIndex !== "") {
                    if (colModel[i].index === $.table._defaults.currentIndex) {
                        minWidth += $("#" + id + "_" + colModel[i].index).width() + 16;
                        break;
                    }
                    minWidth += colModel[i].width  + 1;
                } else {
                    break;
                }
            }

            if (positionX < minWidth) {
                $("#" + id + "VerticalLine").css("left", minWidth);
            }

            if (isAtColumnSide.show) {
                $("#" + id + "Table").css("cursor", "col-resize");
            } else {
                $("#" + id + "Table").css("cursor", "default");
            }
        },

        _mousedownVerticalLine: function (event) {
            var target = event.data.target;
            var id = $.table._getInst(target).id;
            var positionX = event.clientX - document.getElementById(id).offsetLeft - $.table._getPadding(id) + $("#" + id + "Table").scrollLeft(),
            isAtColumnSide = $.table._isAtColumnSide(positionX, target);

            $.table._defaults.currentIndex = isAtColumnSide.index;

            $("#" + id + "Table").unbind("mouseup", $.table._mouseupVerticalLine);
            if (isAtColumnSide.show) {
                if (window.addEventListener) {
                    event.preventDefault(); // to prevent highlighting text in table cells
                }

                $("#" + id + "Table").css("cursor", "col-resize").bind("mouseup", {
                    "target": target,
                    "index": isAtColumnSide.index
                }, $.table._mouseupVerticalLine);
                $("#" + id + "VerticalLine").show();
            } else {
                $("#" + id + "Table").unbind("mouseup", $.table._mouseupVerticalLine);
            }
        },

        _mouseupVerticalLine: function (event) {
            var target = event.data.target,
            index = event.data.index;
            var id = $.table._getInst(target).id,
            settings = $.table._getInst(target).settings,
            verticalLineLeft = $("#" + id + "VerticalLine").css("left");
            var colModel = settings.colModel,
            indexWidth = $.bowknot.strToInt(verticalLineLeft),
            i = 0,
            tableWidth = 0;

            $("#" + id + "VerticalLine").hide();
            $("#" + id + "Table").css("cursor", "default");

            for (; i < colModel.length; i++) {
                if (colModel[i].index === index) {
                    colModel[i].width = indexWidth;
                    break;
                }
                indexWidth = indexWidth - 1 - colModel[i].width;
            }

            if ($("#" + id + "TableMain").attr("scrollHeight")
                !== $("#" + id + "TableMain").attr("clientHeight")) {
                tableWidth = $.table._getTableWidth(colModel).width + SCROLLBAR_WIDTH;
            } else {
                tableWidth = $.table._getTableWidth(colModel).width;
            }

            $($("#" + id + "TableHeader th").get(i)).width(indexWidth);
            $($($("#" + id + "TableMain tr").get(0)).find("td").get(i)).width(indexWidth);
            $("#" + id + "TableHeader").width(tableWidth);
            $("#" + id + "TableMain").width(tableWidth);
        },

        _isAtColumnSide: function (positionX, target) {
            var id = $.table._getInst(target).id,
            colModel = $.table._getInst(target).settings.colModel,
            isColumnSide = {
                "show": false,
                "index": ""
            },
            columnWidth = 0;

            for (var i = 0; i < colModel.length; i++) {
                columnWidth += $($("#" + id + "TableMain tr").first().find("td").get(i)).width() + 1;
                isColumnSide.show = isColumnSide.show
                || positionX === columnWidth
                || positionX === columnWidth + 1
                || positionX === columnWidth - 1;
                if (isColumnSide.show) {
                    isColumnSide.index = colModel[i].index;
                    return isColumnSide;
                }
            }
            return isColumnSide;
        },

        _show: function (it, floatLayerId, id, num) {
            var settings = $("#" + id).data(PROP_NAME).settings;
            var invisibleDatas = $.table._getInvisibleData(settings.colModel, settings.data, [num]),
            position = $(it).position();

            $("#" + floatLayerId + "Table").show().css({
                "left": position.left + 20,
                "top": position.top
            });

            for (var element in invisibleDatas) {
                $("#" + floatLayerId).data(element, invisibleDatas[element]);
            }
        },

        _hide: function (floatLayerId) {
            $("#" + floatLayerId + "Table").hide();
        },

        _selectHeaderCheckbox: function (it, highlightClass) {
            var arrayIt = it.id.split("_");
            var id = arrayIt[0],
            index = arrayIt[1];
            var settings = $("#" + id).data(PROP_NAME).settings;
            var data = settings.data,
            colModel = settings.colModel,
            temp = [];

            for (var i = 0; i < colModel.length; i ++) {
                if (colModel[i].index === index) {
                    for (var j = 0; j < data.length; j++) {
                        var checkBoxId = id + "_" + index + "_" + j;
                        var checkBox = document.getElementById(checkBoxId);
                        if (it.checked) {
                            if ((data[j][index].disabled && data[j][index].value) || !data[j][index].disabled) {
                                data[j][index].value = true;
                                $("#" + checkBoxId).attr("checked","checked");
                                temp.push(j);
                                checkBox.parentNode.parentNode.className = checkBox.parentNode.parentNode.className + " " + highlightClass;
                            }
                        } else {
                            if (data[j][index].disabled && data[j][index].value) {
                                temp.push(j);
                            } else {
                                data[j][index].value = false;
                                $("#" + checkBoxId).removeAttr("checked");
                                checkBox.parentNode.parentNode.className = checkBox.parentNode.parentNode.className.replace(highlightClass, "");
                            }
                        }
                    }
                }
            }

            var invisibleDatas = $.table._getInvisibleData(settings.colModel, data, temp);
            for (var element in invisibleDatas) {
                $(it).data(element, invisibleDatas[element]);
            }
        },

        _selectCheckbox: function (it, highlightClass) {
            var keys = it.id.split("_");
            var id = keys[0],
            index = keys[1],
            order = keys[2];
            var checkboxId = id + "_" + index;
            var settings = $("#" + id).data(PROP_NAME).settings;
            var colModel = settings.colModel,
            data = settings.data,
            className = it.parentNode.parentNode.className,
            checkedArray = [];

            data[order][index].value = it.checked;

            for (var i = 0; i < data.length; i++) {
                if (data[i][index].value) {
                    checkedArray.push(i);
                }
            }

            var invisibleDatas = $.table._getInvisibleData(colModel, data, checkedArray);

            for (var element in invisibleDatas) {
                $("#" + checkboxId).data(element, invisibleDatas[element]);
            }

            // style
            if (it.checked) {
                it.parentNode.parentNode.className = className + " " + highlightClass;
            } else {
                it.parentNode.parentNode.className = className.replace(highlightClass, "");
            }

            // all checked state
            if (checkedArray.length === data.length) {
                $("#" + checkboxId).attr("checked", "checked");
            } else {
                $("#" + checkboxId).removeAttr("checked");
            }

        },

        _getMarginPadding: function (id) {
            var marginLeft = $.bowknot.strToInt(document.getElementById(id).style.marginLeft),
            paddingLeft = $.bowknot.strToInt(document.getElementById(id).style.paddingLeft);
            if (document.getElementById(id).style.marginLeft === "") {
                marginLeft = 0;
            }
            if (document.getElementById(id).style.paddingLeft === "") {
                paddingLeft = 0;
            }
            return marginLeft + paddingLeft;
        },

        _getPadding: function (id) {
            var paddingLeft = $.bowknot.strToInt(document.getElementById(id).style.paddingLeft);
            if (document.getElementById(id).style.paddingLeft === "") {
                paddingLeft = 0;
            }
            return paddingLeft;
        }
    });

    $.fn.table = function (options) {
        var otherArgs = Array.prototype.slice.call(arguments);
        return this.each(function () {
            if (options.update) {
                $.table._updateTable(this, options.update);
            } else if (options.appendData) {
                $.table._appendDataTable(this, options.appendData);
            } else {
                typeof options === "string" ?
                $.table["_" + options + "Table"].
                apply($.table, [this].concat(otherArgs)) :
                $.table._attach(this, options);
            }
        });
    };

    $.table = new Table();

    // Add another global to avoid noConflict issues with inline event handlers
    window["DP_jQuery_" + dpuuid] = $;
})(jQuery);

(function ($) {
    $.fn.extend({
        dialog: {
            version: "0.0.0.8",
            author: "lly219@gmail.com"
        }
    });

    var dpuuid = new Date().getTime();
    var PROP_NAME = 'dialog';

    var Dialog = function () {
        this._defaults = {
            "styleClass": {
                "backgroundClass": "dialog-background",
                "panelClass": "dialog-panel",
                "contentClass": "dialog-content",
                "closeClass": "dialog-close"
            }
        },

        this._settingsDataFormat = {
            height: 300,
            widht: 400
        }
    };

    $.extend(Dialog.prototype, {
        _attach: function (target, settings) {
            if (!target.id) {
                this.uuid++;
                target.id = 'dp' + this.uuid;
            }
            var inst = this._newInst($(target));

            inst.settings = $.extend({}, settings || {});
            $.data(target, PROP_NAME, inst);
            this._init(target);
        },

        /* Create a new instance object. */
        _newInst: function (target) {
            // escape jQuery meta chars
            var id = target[0].id.replace(/([^A-Za-z0-9_])/g, '\\\\$1');
            return {
                id: id
            };
        },

        _getInst: function (target) {
            try {
                return $.data(target, PROP_NAME);
            } catch (err) {
                throw 'Missing instance data for this dialog';
            }
        },

        _destroyBowknot: function () {

        },

        _init: function (target) {
            var inst = this._getInst(target);
            var id = inst.id,
            settings = inst.settings;
            var styleClass = $.bowknot.getDefaults($.dialog._defaults, settings, "styleClass"),
            height = $.bowknot.getDefaults($.dialog._defaults, settings, "height"),
            width = $.bowknot.getDefaults($.dialog._defaults, settings, "width");

            var bgHTML = "<div id='" + id + "BG' class='"
            + styleClass.backgroundClass + "'></div>",
            dialogHTML = "<div id='" + id + "Dialog' class='" + styleClass.panelClass
            + "'><div class='" + styleClass.closeClass + "' onclick=\"$.dialog._close('" + id
            + "');\"></div><div class='bowknot-clear'></div><div id='" + id
            + "Content' class='" + styleClass.contentClass + "'></div></div>";


            $("#" + id).wrap("<div id='" + id + "Wrap'></div>")
            var cloneObj = $("#" + id).clone(true);
            $("#" + id).remove();
            $('body').append(bgHTML + dialogHTML);

            cloneObj.prependTo("#" + id + "Content");
            $("#" + id).show();
            $("#" + id + "Dialog").show().css({
                height: height,
                width:  width,
                top: (document.documentElement.clientHeight - $.bowknot.strToInt(height)) / 2,
                left: (document.documentElement.clientWidth - $.bowknot.strToInt(width)) / 2
            });
        },

        _close: function (id) {
            $("#" + id + "BG").remove();
            $("#" + id).clone(true).prependTo("#" + id + "Wrap");
            $("#" + id).hide();
            $("#" + id + "Dialog").remove();
        },

        _closeDialog: function (target) {
            $.dialog._close(target.id);
        }
    });

    $.fn.dialog = function (options) {
        var otherArgs = Array.prototype.slice.call(arguments);
        return this.each(function () {
            typeof options == 'string' ?
            $.dialog['_' + options + 'Dialog'].
            apply($.dialog, [this].concat(otherArgs)) :
            $.dialog._attach(this, options);
        });
    };

    $.dialog = new Dialog();

    // Add another global to avoid noConflict issues with inline event handlers
    window['DP_jQuery_' + dpuuid] = $;
})(jQuery);

/*
     * Copyright (C) 2010, Liyuan Li
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

(function ($) {
    $.fn.extend({
        completed: {
            version: "0.0.0.3",
            author: "lly219@gmail.com"
        }
    });

    var dpuuid = new Date().getTime();
    var PROP_NAME = 'completed';

    var Completed = function () {
        this._defaults = {
            "styleClass": {
                "panelClass": "completed-panel"
            },
            separator: ",",
            height: 150
        },
        this._settingsDataFormat = {

        }
    };

    $.extend(Completed.prototype, {
        _attach: function (target, settings) {
            if (!target.id) {
                this.uuid++;
                target.id = 'dp' + this.uuid;
            }
            var inst = this._newInst($(target));

            inst.settings = $.extend({
                // TODO: remove to defaults
                currentNum: -1,
                currentName: ""
            }, settings || {});
            $.data(target, PROP_NAME, inst);
            this._init(target);
        },

        /* Create a new instance object. */
        _newInst: function (target) {
            // escape jQuery meta chars
            var id = target[0].id.replace(/([^A-Za-z0-9_])/g, '\\\\$1');
            return {
                id: id
            };
        },

        _getInst: function (target) {
            try {
                return $.data(target, PROP_NAME);
            } catch (err) {
                throw 'Missing instance data for this completed';
            }
        },

        _destroyCompleted: function () {

        },

        _init: function (target) {
            var inst = this._getInst(target);
            var id = inst.id,
            settings = inst.settings;
            var $it = $("#" + id);
            var panelHTML = "<div id='" + id + "Panel' class='"
            + $.bowknot.getDefaults($.completed._defaults, settings, "styleClass").panelClass
            + "' style='width:" + $it.width() + "px;height:"
            + $.bowknot.getDefaults($.completed._defaults, settings, "height") + "'></div>"
            settings.data.sort();

            $it.after(panelHTML).bind("keyup", {
                settings: settings
            }, this._keyupAction).bind("keypress", {
                settings: settings
            }, this._keypressAction);

            var currentStringArray = $it.val().split($.completed._defaults.separator)
            settings.currentName = currentStringArray[currentStringArray.length - 1];

            $(document).click(function (event) {
                if (event.currentTarget.activeElement.id !== id + "Panel") {
                    $("#" + id + "Panel").hide();
                }
            });
        },

        _getMatchData: function (subString, data) {
            var matchData = [];
            for (var i = 0; i < data.length; i++) {
                if (typeof data[i] === "number") {
                    data[i] = data[i].toString();
                }
                if (data[i].toLowerCase().indexOf(subString.toLowerCase()) === 0) {
                    matchData.push(data[i]);
                }
            }
            return matchData;
        },

        _removeExisted: function (existedArray, datas) {
            for (var i = 0; i < existedArray.length; i++) {
                for (var index in datas) {
                    if (datas[index] === existedArray[i]) {
                        datas.splice(index, 1);
                    }
                }
            }
        },

        _keyupAction: function (event) {
            var settings = event.data.settings,
            currentStringArray = this.value.split($.completed._defaults.separator),
            id = this.id;
            currentStringArray.pop();
            var matchData = $.completed._getMatchData(settings.currentName, settings.data);
            $.completed._removeExisted(currentStringArray, matchData);
            if (matchData.length > 0) {
                if (event.keyCode === 38) {
                    // up
                    if (settings.currentNum > -1) {
                        settings.currentNum--;
                    }
                    if (settings.currentNum > -1) {
                        if (currentStringArray.length === 0) {
                            this.value = matchData[settings.currentNum];
                        } else {
                            this.value = currentStringArray.toString() + $.completed._defaults.separator + matchData[settings.currentNum];
                        }
                    }
                } else if (event.keyCode === 40) {
                    // dowm
                    if (settings.currentNum < matchData.length - 1) {
                        settings.currentNum++;
                    }
                    if (currentStringArray.length === 0) {
                        this.value = matchData[settings.currentNum];
                    } else {
                        this.value = currentStringArray.toString() + $.completed._defaults.separator + matchData[settings.currentNum];
                    }
                } else if (event.keyCode === 13) {
                    // enter
                    settings.currentNum = -1;
                    $.completed._enterAction(id, settings);
                    return;
                }

                $.completed._buildPanel(id, matchData, settings.currentNum);
            } else {
                settings.currentNum = -1;
                $("#" + id + "Panel").hide();
            }
        },

        _keypressAction: function (event) {
            var settings = event.data.settings;
            var currentName = settings.currentName,
            value = this.value;
            if(event.charCode === 44) {
                // ","
                settings.currentNum = -1;
                settings.currentName = "";
                return;
            }

            if (event.charCode !== 0) {
                currentName += String.fromCharCode(event.charCode);
            }

            if (event.keyCode === 8) {
                // backspace
                if (value.charAt(value.length - 1) === $.completed._defaults.separator) {
                    currentName = "";
                } else {
                    currentName = currentName.substr(0, currentName.length - 1);
                }
            }

            if (event.charCode !== 0 && currentName === ""
                && value.charAt(value.length - 1) === $.completed._defaults.separator) {
                var tempArray = value.split($.completed._defaults.separator);
                tempArray.pop();
                currentName = tempArray.pop();
            }
            settings.currentName = currentName;
        },

        _enterAction: function (id, settings) {
            settings.currentName = "";
            settings.currentNum = -1;
            $("#" + id).val($("#" + id).val() + $.completed._defaults.separator);
            $("#" + id + "Panel").hide();
        },

        _buildPanel: function (id, data, currentNum) {
            var panelHTML = "";
            for (var i = 0; i < data.length; i++){
                if (currentNum === i) {
                    panelHTML += "<div class='selected'>" + data[i] + "</div>";
                } else {
                    panelHTML += "<div>" + data[i] + "</div>";
                }
            }
            $("#" + id + "Panel").html(panelHTML).show();
        }
    });

    $.fn.completed = function (options) {
        var otherArgs = Array.prototype.slice.call(arguments);
        return this.each(function () {
            typeof options == 'string' ?
            $.completed['_' + options + 'Completed'].
            apply($.completed, [this].concat(otherArgs)) :
            $.completed._attach(this, options);
        });
    };

    $.completed = new Completed();

    // Add another global to avoid noConflict issues with inline event handlers
    window['DP_jQuery_' + dpuuid] = $;
})(jQuery);
